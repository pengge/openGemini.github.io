import{_ as a,X as t,Y as p,Z as e,a1 as n,$ as o,a0 as c,a3 as i,C as u}from"./framework-a5f096d1.js";const l="/assets/index_6-2b0b13f7.png",k="/assets/index_7-e415613c.png",r="/assets/index_8-b8bb3728.png",d="/assets/index_9-b9f5348b.png",v={},m=i(`<p>本文会结合部分源码分析openGemini 的索引的原理和读写整体流程。</p><h2 id="索引介绍" tabindex="-1"><a class="header-anchor" href="#索引介绍" aria-hidden="true">#</a> <strong>索引介绍</strong></h2><p>众所周知，索引是数据库系统中非常核心的组件，它是提升数据库查询性能的关键方法。在传统的关系型数据库中，常常使用 B+ 树作为索引的组织结构，B+ 树具备很好的点查和范围查询性能，非常适合对查询延时要求较高的 TP 场景。但是 B+ 树的写入会导致大量的随机 io，严重影响系统性能，并不适用于海量的时序写入场景。</p><p>同时考虑查询和写入的性能，openGemini 选择使用倒排索引这种高效的数据结构。倒排本质上是 key-value 结构，业界非常成熟的方式是使用 LSM-Tree 来存储 key-value，比如 RocksDB、HBase 等，LSM-Tree 具备高效的写入性能。同时，结合 flush 排序、cache 等技术，可以达到较好的查询性能。</p><h2 id="索引数据" tabindex="-1"><a class="header-anchor" href="#索引数据" aria-hidden="true">#</a> <strong>索引数据</strong></h2><p>索引本质上也是一堆数据，那么在 openGemini 中，会存储哪些数据呢？本节将详细介绍。</p><p>由于 openGemini 兼容 influxdb 协议，所以在数据模型上也保持一致。在 openGemini 中，指标数据在底层按照时间线组织，因此，查询数据时，首先要获取满足条件的时间线，再到存储引擎中获取具体的指标数据。为了节省存储，时间线往往以 id 的方式存储，而在索引中会存储时间线值和id的字典映射关系。如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>seriesKey -&gt; tsid
tsid -&gt; seriesKey
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>seriesKey 是时间线的原始 key 值，tsid 是根据 seriesKey 生成 uuid，两者一一映射。在数据写入时，需要判断 seriesKey 对应的 tsid 是否存在，如果不存在，则会建立上述映射数据，写入索引。</p><p>倒排索引的目的是为了加快查询过滤，因此，还需要存储一个核心的映射关系：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tag -&gt; tsids
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 tag 包含了 measurement、tagKey 和 tagValue，通过这个映射关系，可以找到满足 tag filter 过滤条件的 tsids，加速查询。</p><p>上述是索引存储的主要数据，下面会通过源码剖析，详细介绍索引的写入和查询原理。</p><h2 id="写入流程" tabindex="-1"><a class="header-anchor" href="#写入流程" aria-hidden="true">#</a> <strong>写入流程</strong></h2><p>索引写入的入口方法为 shard.writeIndex，该方法会提前判断写入的 points 是否需要创建索引，如果索引都已经创建则不再重复走索引流程。否则，继续将 points 往下传，进入到索引创建流程。索引创建入口IndexBuilder.CreateIndexIfNotExists，关键代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>iBuilder <span class="token operator">*</span>IndexBuilder<span class="token punctuation">)</span> <span class="token function">CreateIndexIfNotExists</span><span class="token punctuation">(</span>mmRows <span class="token operator">*</span>dictpool<span class="token punctuation">.</span>Dict<span class="token punctuation">,</span> needSecondaryIndex <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">//...</span>
	<span class="token keyword">for</span> mmIdx <span class="token operator">:=</span> <span class="token keyword">range</span> mmRows<span class="token punctuation">.</span>D <span class="token punctuation">{</span>
		rows<span class="token punctuation">,</span> ok <span class="token operator">:=</span> mmRows<span class="token punctuation">.</span>D<span class="token punctuation">[</span>mmIdx<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>influx<span class="token punctuation">.</span>Row<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			<span class="token function">putIndexRows</span><span class="token punctuation">(</span>iRows<span class="token punctuation">)</span>
			<span class="token keyword">return</span> errno<span class="token punctuation">.</span><span class="token function">NewError</span><span class="token punctuation">(</span>errno<span class="token punctuation">.</span>CreateIndexFailPointRowType<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> rowIdx <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>rows <span class="token punctuation">{</span>
			row <span class="token operator">:=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>rows<span class="token punctuation">)</span><span class="token punctuation">[</span>rowIdx<span class="token punctuation">]</span>
			<span class="token keyword">if</span> row<span class="token punctuation">.</span>SeriesId <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span><span class="token operator">*</span>iRows<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>iRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token operator">*</span>iRows <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>iRows<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>iRows<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token operator">*</span>iRows <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>iRows<span class="token punctuation">,</span> indexRow<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			iRow <span class="token operator">:=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>iRows<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>iRows<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
			iRow<span class="token punctuation">.</span>Row <span class="token operator">=</span> row
			iRow<span class="token punctuation">.</span>Wg <span class="token operator">=</span> <span class="token operator">&amp;</span>wg

			wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
			idx <span class="token operator">:=</span> primaryIndex<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>MergeSetIndex<span class="token punctuation">)</span>
			idx<span class="token punctuation">.</span><span class="token function">WriteRow</span><span class="token punctuation">(</span>iRow<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// Wait all rows in the batch finished.</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//...</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 iBuilder.CreateIndexIfNotExists 中，会遍历所有 points，并调用 idx.WriteRow 写索引。这里比较关键的是，由于 WriteRow 是异步方法，索引在遍历完 points 后需要调用 wg.wait 等待写入结果。至于 WriteRow 为什么设计成异步方法，下面会详细讲解。</p><p>上面我们讲过，seriesKey 和 tsid 是一一映射的，因此，在索引写入时，为了防止 seriesKey 产生多个 tsid，索引的创建会串行执行。很明显，串行执行无法充分发挥 CPU 的计算能力，进而影响写入性能。那怎么能提升索引写入性能呢？其实只要保证包含相同 seriesKey 的 points 串行创建索引即可，而不同 seriesKey 的 points 可以并发创建，如下：</p><img src="`+l+`" alt="图片" style="zoom:80%;"><p>索引内部引入多个 queue，将 serieskey hash 到相应的 queue 中，这样相同 serieskey 的 rows 必定路由到同一个 queue 中，多个 queue 可以并行处理，同一个 queue 中的 rows 串行建索引，整体并发度提升，这是典型的生产者-消费者模式。参考文件engine/index/tsi/mergeset_index.go，并发写入的代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>idx <span class="token operator">*</span>MergeSetIndex<span class="token punctuation">)</span> <span class="token function">WriteRow</span><span class="token punctuation">(</span>row <span class="token operator">*</span>indexRow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	partId <span class="token operator">:=</span> meta<span class="token punctuation">.</span><span class="token function">HashID</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>Row<span class="token punctuation">.</span>IndexKey<span class="token punctuation">)</span> <span class="token operator">&amp;</span> queueSizeMask
	idx<span class="token punctuation">.</span>queues<span class="token punctuation">[</span>partId<span class="token punctuation">]</span> <span class="token operator">&lt;-</span> row
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>tsIdx <span class="token operator">*</span>tsIndexImpl<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span>idx <span class="token operator">*</span>MergeSetIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>idx<span class="token punctuation">.</span>queues<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> row <span class="token operator">:=</span> <span class="token keyword">range</span> idx<span class="token punctuation">.</span>queues<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">{</span>
				row<span class="token punctuation">.</span>Row<span class="token punctuation">.</span>SeriesId<span class="token punctuation">,</span> row<span class="token punctuation">.</span>Err <span class="token operator">=</span> idx<span class="token punctuation">.</span><span class="token function">CreateIndexIfNotExistsByRow</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>Row<span class="token punctuation">)</span>
				row<span class="token punctuation">.</span>Row<span class="token punctuation">.</span>PrimaryId <span class="token operator">=</span> row<span class="token punctuation">.</span>Row<span class="token punctuation">.</span>SeriesId
				row<span class="token punctuation">.</span>Wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WriteRow 充当生产者的角色，将 seriesKey 哈希并路由到相应的 queue 中，run 方法中会对每个 queue 开启一个 goroutine 消费数据。</p><p>继续往下进入索引创建方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>idx <span class="token operator">*</span>MergeSetIndex<span class="token punctuation">)</span> <span class="token function">createIndexesIfNotExists</span><span class="token punctuation">(</span>vkey<span class="token punctuation">,</span> vname <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> tags <span class="token punctuation">[</span><span class="token punctuation">]</span>influx<span class="token punctuation">.</span>Tag<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tsid<span class="token punctuation">,</span> err <span class="token operator">:=</span> idx<span class="token punctuation">.</span><span class="token function">getSeriesIdBySeriesKey</span><span class="token punctuation">(</span>vkey<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> tsid <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> tsid<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> err <span class="token operator">:=</span> idx<span class="token punctuation">.</span>indexBuilder<span class="token punctuation">.</span><span class="token function">SeriesLimited</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token operator">*</span><span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">*</span>id <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			idx<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">PutTSIDToTSIDCache</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> vkey<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tsid<span class="token punctuation">)</span>

	tsid<span class="token punctuation">,</span> err <span class="token operator">=</span> idx<span class="token punctuation">.</span><span class="token function">createIndexes</span><span class="token punctuation">(</span>vkey<span class="token punctuation">,</span> vname<span class="token punctuation">,</span> tags<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> tsid<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 seriesKey 查找 tsid 是否存在，如果存在则直接返回，否则，调用 createIndexes 方法创建索引，最后会将 seriesKey -&gt; tsid 映射关系回写 cache，提升查询性能。createIndexes 方法会创建具体的索引数据，流程如下图：</p><img src="`+k+`" alt="图片" style="zoom:67%;"><p>部分代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>idx <span class="token operator">*</span>MergeSetIndex<span class="token punctuation">)</span> <span class="token function">createIndexes</span><span class="token punctuation">(</span>seriesKey <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> name <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> tags <span class="token punctuation">[</span><span class="token punctuation">]</span>influx<span class="token punctuation">.</span>Tag<span class="token punctuation">,</span> tagArray <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>influx<span class="token punctuation">.</span>Tag<span class="token punctuation">,</span> enableTagArray <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tsid <span class="token operator">:=</span> idx<span class="token punctuation">.</span>indexBuilder<span class="token punctuation">.</span><span class="token function">GenerateUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	ii <span class="token operator">:=</span> idxItemsPool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> idxItemsPool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span>

	<span class="token comment">// Create Series key -&gt; TSID index</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> nsPrefixKeyToTSID<span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> seriesKey<span class="token operator">...</span><span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> kvSeparatorChar<span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> encoding<span class="token punctuation">.</span><span class="token function">MarshalUint64</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> tsid<span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// Create TSID -&gt; Series key index</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> nsPrefixTSIDToKey<span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> encoding<span class="token punctuation">.</span><span class="token function">MarshalUint64</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> tsid<span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> seriesKey<span class="token operator">...</span><span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// Create Tag -&gt; TSID index</span>
	compositeKey <span class="token operator">:=</span> kbPool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> enableTagArray <span class="token punctuation">{</span>
		tagMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tags <span class="token operator">:=</span> <span class="token keyword">range</span> tagArray <span class="token punctuation">{</span>
			<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> tags <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
					<span class="token keyword">continue</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> tagMap<span class="token punctuation">[</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
					tagMap<span class="token punctuation">[</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> tagMap<span class="token punctuation">[</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Key<span class="token punctuation">]</span><span class="token punctuation">[</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
					<span class="token keyword">continue</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					tagMap<span class="token punctuation">[</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Key<span class="token punctuation">]</span><span class="token punctuation">[</span>tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
				ii<span class="token punctuation">.</span>B <span class="token operator">=</span> idx<span class="token punctuation">.</span><span class="token function">marshalTagToTSIDs</span><span class="token punctuation">(</span>compositeKey<span class="token punctuation">.</span>B<span class="token punctuation">,</span> ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> name<span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> tsid<span class="token punctuation">)</span>
				ii<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> tags <span class="token punctuation">{</span>
			ii<span class="token punctuation">.</span>B <span class="token operator">=</span> idx<span class="token punctuation">.</span><span class="token function">marshalTagToTSIDs</span><span class="token punctuation">(</span>compositeKey<span class="token punctuation">.</span>B<span class="token punctuation">,</span> ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> name<span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> tsid<span class="token punctuation">)</span>
			ii<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	compositeKey<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">marshalCompositeTagKey</span><span class="token punctuation">(</span>compositeKey<span class="token punctuation">.</span>B<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> nsPrefixTagToTSIDs<span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">marshalTagValue</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> compositeKey<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">marshalTagValue</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span>B <span class="token operator">=</span> encoding<span class="token punctuation">.</span><span class="token function">MarshalUint64</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>B<span class="token punctuation">,</span> tsid<span class="token punctuation">)</span>
	ii<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	kbPool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>compositeKey<span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">:=</span> idx<span class="token punctuation">.</span>tb<span class="token punctuation">.</span><span class="token function">AddItems</span><span class="token punctuation">(</span>ii<span class="token punctuation">.</span>Items<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> tsid<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先生成 uuid 作为 tsid，然后创建 seriesKey -&gt; tsid，tsid -&gt; seriesKey，tag -&gt; tsids 的映射关系，并添加到底层索引存储中。item 是存储的最小单元，每个映射关系以 key-value 的方式存入到 item，最后再写入到底层存储结构中。</p><p>item 本质上是一个 byte slice，索引数据会按 byte 写入 item。1 byte 的 prefix 用来区分 item 类别，即通过 prefix 可以过滤要查的索引数据类型。key-value 信息将按照一定规则编码到 item。具体的编码细节本文不详细展开，感兴趣的同学可以细看 openGemini github 源码。</p><p>以上为索引写入的整体流程，接下来开始分析如何在索引中查找数据。</p><h2 id="查询流程" tabindex="-1"><a class="header-anchor" href="#查询流程" aria-hidden="true">#</a> <strong>查询流程</strong></h2><p>索引的目的就是为了加快查询，在 openGemini 中，查询条件可以包含时间范围、field过滤、tag 过滤。索引主要是加速 tag 过滤，快速找到满足条件的 tsids。接下来开始源码，索引查询执行的入口是 MergeSetIndex.SearchSeriesIterator，部分代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>idx <span class="token operator">*</span>MergeSetIndex<span class="token punctuation">)</span> <span class="token function">SearchSeriesIterator</span><span class="token punctuation">(</span>span <span class="token operator">*</span>tracing<span class="token punctuation">.</span>Span<span class="token punctuation">,</span> name <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> opt <span class="token operator">*</span>query<span class="token punctuation">.</span>ProcessorOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span>SeriesIDIterator<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//...</span>
	singleSeries <span class="token operator">:=</span> opt<span class="token punctuation">.</span><span class="token function">GetHintType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> hybridqp<span class="token punctuation">.</span>FullSeriesQuery
	<span class="token keyword">if</span> singleSeries <span class="token punctuation">{</span>
		tsid<span class="token punctuation">,</span> err <span class="token operator">=</span> idx<span class="token punctuation">.</span><span class="token function">GetSeriesIdBySeriesKey</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>SeriesKey<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			idx<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;getSeriesIdBySeriesKey fail&quot;</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mergeset&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	is <span class="token operator">:=</span> idx<span class="token punctuation">.</span><span class="token function">getIndexSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	is<span class="token punctuation">.</span><span class="token function">setDeleted</span><span class="token punctuation">(</span>idx<span class="token punctuation">.</span><span class="token function">getDeletedTSIDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	itr<span class="token punctuation">,</span> err <span class="token operator">:=</span> is<span class="token punctuation">.</span><span class="token function">measurementSeriesByExprIterator</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>Condition<span class="token punctuation">,</span> singleSeries<span class="token punctuation">,</span> tsid<span class="token punctuation">)</span>
	<span class="token keyword">if</span> search <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		search<span class="token punctuation">.</span><span class="token function">Finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里查询做了一个优化，场景是当用户指定按照时间线查询时，这里可以根据 SeriesKey 直接查出 tsid，避免走 tag 过滤查询，从而大幅提升查询性能。如果是普通查询，会走到indexSearch.seriesByExprIterator 方法，该方法会递归遍历条件表达式树，然后将查询的结果按交并组合起来。该方法代码比较长，不再罗列。为了便于理解，举个例子，如下 SQL 语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> 
<span class="token keyword">FROM</span> mst 
<span class="token keyword">WHERE</span> host<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token operator">AND</span> region<span class="token operator">=</span>cd <span class="token operator">or</span> region<span class="token operator">=</span>sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么该 SQL 对应的条件表达式树如下图：</p><img src="`+r+'" alt="图片" style="zoom:100%;"><p>按照后序遍历的方式递归遍历节点，直到叶子节点，当遇到 &quot;=&quot; 操作符时，会将 tagKey 和 tagValue 取出来走具体的索引过滤流程，查出满足条件的 tsid 集合。所以，每个叶子节点对应一个最小单元的查询条件，各个叶子节点查询结果会往上返回，最后再对这些结果取交并集。</p><p>忽略掉中间步骤，直接看索引数据是如何查找出来的。代码见 indexSearch.getTSIDsForTagFilterSlow。</p><img src="'+d+'" alt="图片" style="zoom:80%;">',41);function b(g,y){const s=u("RouterLink");return t(),p("div",null,[m,e("p",null,[n("首先定位到第一个大于等于前缀的 item，然后从该 item 开始往后遍历解析 item 并判断 item 是否满足当前查询条件，如果满足则收集解析出来的 tsid，否则继续往下迭代，直到循环结束。要了解索引底层存储如何获取数据请参考文档："),o(s,{to:"/zh/guide/kernel/kernel_index.html"},{default:c(()=>[n("查询索引结构解析")]),_:1})])])}const w=a(v,[["render",b],["__file","kernel_index_2.html.vue"]]);export{w as default};
