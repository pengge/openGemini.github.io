import{_ as l,X as r,Y as t,Z as e,a1 as a,$ as n,a3 as i,C as d}from"./framework-a5f096d1.js";const o={},c=i('<h1 id="克隆-构建-运行" tabindex="-1"><a class="header-anchor" href="#克隆-构建-运行" aria-hidden="true">#</a> 克隆-构建-运行</h1><h2 id="先决条件" tabindex="-1"><a class="header-anchor" href="#先决条件" aria-hidden="true">#</a> 先决条件</h2><h3 id="编译环境信息" tabindex="-1"><a class="header-anchor" href="#编译环境信息" aria-hidden="true">#</a> 编译环境信息</h3>',3),p={href:"https://go.dev/dl/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},v={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},b=i(`<h3 id="如何设置go环境变量" tabindex="-1"><a class="header-anchor" href="#如何设置go环境变量" aria-hidden="true">#</a> 如何设置GO环境变量</h3><p>打开~/.profile配置文件，在文件末尾添加如下配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置 GOPATH（需要自定义目录）</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span>/path/to/dir
<span class="token comment"># 设置国内代理</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct
<span class="token comment"># 开启 go mod 模式</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GONOSUMDB</span><span class="token operator">=</span>*
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOSUMDB</span><span class="token operator">=</span>off
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="克隆" tabindex="-1"><a class="header-anchor" href="#克隆" aria-hidden="true">#</a> 克隆</h2><p>将源代码克隆到你的开发机器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/openGemini/openGemini.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="构建" tabindex="-1"><a class="header-anchor" href="#构建" aria-hidden="true">#</a> 构建</h2><ol><li>进入主目录。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> openGemini
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>编译。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 build.py <span class="token parameter variable">--clean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>编译后的二进制文件在build目录下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> build
<span class="token operator">&gt;</span> ts-cli ts-meta ts-monitor ts-server ts-sql ts-store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ts-server</code> 是独立运行版本。</p></div><h2 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h2><p>运行单机版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./build/ts-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于 v1.0.1 及更早的版本，您需要指定启动 <code>ts-server</code> 的配置文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./build/ts-server <span class="token parameter variable">-config</span> config/openGemini.singlenode.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想在后台启动它，你可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> ./build/ts-server <span class="token parameter variable">-config</span> config/openGemini.singlenode.conf <span class="token operator">&gt;</span> server_extra.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>		
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h2 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h2><p>为了方便对数据库进行各种查询，openGemini提供了一个名为openGemini CLI（简称ts-cli）的命令行应用程序。 进入openGemini命令行，只需要进入<code>ts-cli</code>所在目录，在终端执行<code>ts-cli</code>即可。</p><p>使用客户端连接到openGemini你可以使用以下命令：</p><div class="language-狂欢 line-numbers-mode" data-ext="狂欢"><pre class="language-狂欢"><code>./build/ts-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>默认情况下，它连接到 <code>127.0.0.1:8086</code>，但您可以使用以下命令连接到其他主机：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./build/ts-cli <span class="token parameter variable">-host</span> <span class="token number">192.168</span>.0.1 <span class="token parameter variable">-port</span> <span class="token number">8086</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更多用法请使用以下命令探索：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./build/ts-cli <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div>`,21);function m(g,k){const s=d("ExternalLinkIcon");return r(),t("div",null,[c,e("ul",null,[e("li",null,[e("a",p,[a("GO"),n(s)]),a("：版本 v1.18+")]),e("li",null,[e("a",h,[a("Python"),n(s)]),a("：版本 v3.7+")]),e("li",null,[e("a",u,[a("Git"),n(s)]),a(" : openGemini 源代码作为 git 存储库托管在 GitHub 上。 要使用 git 存储库，请"),e("a",v,[a("安装 Git"),n(s)]),a("。")])]),b])}const _=l(o,[["render",m],["__file","build_source_code.html.vue"]]);export{_ as default};
