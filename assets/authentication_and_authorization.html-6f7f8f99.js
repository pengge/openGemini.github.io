import{_ as o,X as l,Y as r,Z as a,a1 as e,$ as t,a0 as i,a3 as s,C as c}from"./framework-a5f096d1.js";const d={},u=a("h2",{id:"authentication",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#authentication","aria-hidden":"true"},"#"),e(" authentication")],-1),p=a("p",null,"openGemini supports security verification of user name and password",-1),h=s(`<li>By default, authentication is disabled in the configuration file, enable authentication by setting the <code>auth-enabled</code> option to <code>true</code> in the configuration file.<div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">http</span><span class="token punctuation">]</span>  
<span class="token key property">auth-enabled</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>After restarting the process, openGemini will check the user information of each request and will only process authenticated user requests.</li>`,2),m=s('<h2 id="authenticate-using-the-api" tabindex="-1"><a class="header-anchor" href="#authenticate-using-the-api" aria-hidden="true">#</a> Authenticate using the API</h2><ul><li><p>Basic Authentication</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-G</span> http://localhost:8086/query <span class="token parameter variable">-u</span> user0:<span class="token variable">${YOUR_PWD}</span> --data-urlencode <span class="token string">&quot;q=SHOW DATABASES&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Using username and password as parameters in the URL</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-G</span> <span class="token string">&quot;http://localhost:8086/query?u=user0&amp;p=<span class="token variable">${YOUR_PWD}</span>&quot;</span> --data-urlencode <span class="token string">&quot;q=SHOW DATABASES&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>put username and password in request body</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-G</span> http://localhost:8086/query --data-urlencode <span class="token string">&quot;u=user0&quot;</span> --data-urlencode <span class="token string">&quot;p=<span class="token variable">${YOUR_PWD}</span>&quot;</span> --data-urlencode <span class="token string">&quot;q=SHOW DATABASES&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul>',2),v=a("strong",null,"relate entries",-1),b=s(`<h2 id="authenticate-using-the-cli" tabindex="-1"><a class="header-anchor" href="#authenticate-using-the-cli" aria-hidden="true">#</a> Authenticate using the CLI</h2><ul><li>Authenticate by username and password when starting the CLI<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ts-cli <span class="token parameter variable">-username</span> user0 <span class="token parameter variable">-password</span> <span class="token variable">\${YOUR_PWD}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>Use the auth command to authenticate after starting the CLI<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> auth
username: user0  
password:  
<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span> 
name: <span class="token keyword">databases</span>
<span class="token operator">+</span><span class="token comment">---------------------+</span>
<span class="token operator">|</span> name                <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------+</span>
<span class="token operator">|</span> NOAA_water_database <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------+</span>
<span class="token number">1</span> <span class="token keyword">columns</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,2);function k(g,_){const n=c("RouterLink");return l(),r("div",null,[u,p,a("ol",null,[a("li",null,[e("Create at least one admin user, see "),t(n,{to:"/guide/security_user/user_manage.html"},{default:i(()=>[e("User Management")]),_:1}),e(" for how to create an admin user")]),h]),m,a("p",null,[v,e(),t(n,{to:"/guide/security_user/user_manage.html#grant"},{default:i(()=>[e("User Management")]),_:1})]),b])}const q=o(d,[["render",k],["__file","authentication_and_authorization.html.vue"]]);export{q as default};
