import{_ as e,X as n,Y as t,Z as o,a1 as s,$ as p,a0 as r,a3 as u,C as c}from"./framework-a5f096d1.js";const l="/assets/stream_1-cff71457.jpg",i={},d=u('<figure><img src="'+l+`" alt="流计算演示图" tabindex="0" loading="lazy"><figcaption>流计算演示图</figcaption></figure><p>整体流程如上图所示，用户写入数据如果被指定stream，Copy一份数据走stream的流程。 ts-store侧的stream计算目前分为两个模块，Stream和window，整体是一个五级pipeline。 Stream模块，负责任务管理，数据接入以及初步过滤。 Window模块，负责时间窗口过滤，计算，以及数据下盘。</p><h2 id="创建stream" tabindex="-1"><a class="header-anchor" href="#创建stream" aria-hidden="true">#</a> 创建Stream</h2><p>可以通过如下方式向时间线中加入一条流计算来实现前聚合，加入流计算后，数据就可以一边写入，一边聚合。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> STREAM test <span class="token keyword">INTO</span> db0<span class="token punctuation">.</span>autogen<span class="token punctuation">.</span>cpu1 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">&quot;usage_user&quot;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;sum_usage_user&quot;</span> <span class="token keyword">FROM</span> <span class="token string">&quot;telegraf&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;autogen&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;cpu&quot;</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">1</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;cpu&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;host&quot;</span> delay <span class="token number">20</span>s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，test是流的名字，db0为database，autogen为RP，cpu1为measurement。这条命令添加了一条流计算，流计算的聚合函数为sum，delay 20s表示容忍的时间延迟。</p><p>该语句的含义是，把写入&quot;telegraf&quot;.&quot;autogen&quot;.&quot;cpu&quot;（db为Telegraf，RP为autogen，表为cpu）的数据进行流式计算，结果写入表cpu1中，聚合方法为sum(&quot;usage_user&quot;)，如果数据由于网络中断，导致在当前时间窗 1m + 20s的时间内未到达，这个数据将被丢弃，不再当前时间窗内被计算，新的其他数据会在下一个时间窗内计算。</p><h2 id="查看stream" tabindex="-1"><a class="header-anchor" href="#查看stream" aria-hidden="true">#</a> 查看Stream</h2><p>通过这条指令可以查看数据库内所有的流计算：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> STREAMS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="删除stream" tabindex="-1"><a class="header-anchor" href="#删除stream" aria-hidden="true">#</a> 删除Stream</h2><p>通过这条指令可以删除数据库内的流计算：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> STREAM <span class="token operator">&lt;</span>流计算的名字<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13);function m(k,g){const a=c("RouterLink");return n(),t("div",null,[o("p",null,[s("当数据量较大，时间线较多，特别是，聚合前后，时间线下降数个数量级时，推荐使用流式计算做前聚合。流计算具有计算快，网络开销小，纯内存，对底层无影响等优点。连续查询适用场景参考文档 "),p(a,{to:"/zh/guide/features/continue_query.html"},{default:r(()=>[s("Continue Query")]),_:1})]),d])}const h=e(i,[["render",m],["__file","stream.html.vue"]]);export{h as default};
