import{_ as e,X as a,Y as n,a3 as s}from"./framework-a5f096d1.js";const t={},i=s(`<p>The following are the steps to enable HTTPS in openGemini:</p><h2 id="generate-certificate-and-key" tabindex="-1"><a class="header-anchor" href="#generate-certificate-and-key" aria-hidden="true">#</a> Generate certificate and key</h2><p>First, you need to generate an SSL certificate and key. You can generate it using openssl command</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-x509</span> <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-newkey</span> rsa:2048 <span class="token parameter variable">-keyout</span> /etc/ssl/openGemini-selfsigned.key <span class="token parameter variable">-out</span> /etc/ssl/openGemini-selfsigned.crt <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=US/ST=CA/L=San Francisco/O=openGemini/OU=openGemini/CN=localhost&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The above command generates a self-signed certificate and key with a specified validity period of 365 days. Please modify the parameters according to your needs.</p><h2 id="modify-the-opengemini-configuration-file" tabindex="-1"><a class="header-anchor" href="#modify-the-opengemini-configuration-file" aria-hidden="true">#</a> Modify the openGemini configuration file</h2><p>Next, you need to modify openGemini&#39;s configuration file. In the configuration file, find the <code>[http]</code> section and add the following:</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">http</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token key property">https-enabled</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>
<span class="token key property">https-certificate</span> <span class="token punctuation">=</span> <span class="token string">&quot;/etc/ssl/openGemini-selfsigned.crt&quot;</span>
<span class="token key property">https-private-key</span> <span class="token punctuation">=</span> <span class="token string">&quot;/etc/ssl/openGemini-selfsigned.key&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The path of the certificate and key can be modified.</p><h2 id="restart-opengemini" tabindex="-1"><a class="header-anchor" href="#restart-opengemini" aria-hidden="true">#</a> Restart openGemini</h2><p>After modifying the configuration file, you need to restart the <code>ts-sql</code> process or <code>ts-server</code> process for the changes to take effect.</p><h2 id="check-that-https-is-working" tabindex="-1"><a class="header-anchor" href="#check-that-https-is-working" aria-hidden="true">#</a> Check that HTTPS is working</h2><p>You can use the following command to check whether https is in effect</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-k</span> https://localhost:8086/ping
HTTP/1.1 <span class="token number">200</span> Connection established

HTTP/1.1 <span class="token number">204</span> No Content
Content-Type: application/json
Request-Id: 5073446b-e2b7-11ed-8002-72ef6a841b9c
X-Request-Id: 5073446b-e2b7-11ed-8002-72ef6a841b9c
Date: Mon, <span class="token number">24</span> Apr <span class="token number">2023</span> <span class="token number">15</span>:47:27 GMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above command will send an HTTPS request to openGemini and return a response with status 204. If you get a right response, HTTPS has been successfully enabled. Note that since we are using a self-signed certificate, you need to use the <code>-k</code> parameter to skip certificate verification.</p><p><strong>Using the CLI to check if HTTPS is working</strong>ï¼š</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ts-cli <span class="token parameter variable">-ssl</span> <span class="token parameter variable">-host</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-port</span> <span class="token number">8086</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can use <code>-unsafeSsl</code> to skip certificate verification.</p>`,18),o=[i];function r(c,p){return a(),n("div",null,o)}const d=e(t,[["render",r],["__file","https.html.vue"]]);export{d as default};
