import{_ as s,X as n,Y as a,a3 as e}from"./framework-a5f096d1.js";const t={},o=e(`<h2 id="create-continuous-query" tabindex="-1"><a class="header-anchor" href="#create-continuous-query" aria-hidden="true">#</a> CREATE CONTINUOUS QUERY</h2><h3 id="basic-syntax" tabindex="-1"><a class="header-anchor" href="#basic-syntax" aria-hidden="true">#</a> Basic Syntax</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token operator">&lt;</span>cq_name<span class="token operator">&gt;</span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>database_name<span class="token operator">&gt;</span>
<span class="token keyword">BEGIN</span>
  <span class="token operator">&lt;</span>cq_query<span class="token operator">&gt;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="basic-syntax-description" tabindex="-1"><a class="header-anchor" href="#basic-syntax-description" aria-hidden="true">#</a> Basic Syntax Description</h3><p><code>cq_name</code> name of the continuous query.</p><p><code>database_name</code> name of the database where the continuous query is located.</p><p><code>cq_query</code> query statement in continuous query. This statement requires a function, an <code>INTO</code> clause and a <code>GROUP BY time()</code> clause:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span><span class="token keyword">function</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">INTO</span> <span class="token operator">&lt;</span>destination_measurement<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>measurement<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>stuff<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">interval</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>tag_key<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p><code>cq_query</code> does not require a time range in the <code>WHERE</code> clause. openGemini automatically generates the time range of <code>cq_query</code> when executing CQ. Any user-specified time ranges in the <code>WHERE</code> clause of <code>cq_query</code> will be ignored by the databse.</p></div><h4 id="when-cq-executes-and-what-timeframe-it-covers" tabindex="-1"><a class="header-anchor" href="#when-cq-executes-and-what-timeframe-it-covers" aria-hidden="true">#</a> When CQ Executes and What Timeframe it Covers</h4><p>CQ operates on real-time data. They use the local server&#39;s timestamp, the <code>GROUP BY time()</code> interval and openGemini&#39;s preset time boundaries to determine when to execute and the time range covered in the query.</p><p>CQs are executed at the same interval as <code>cq_query</code>&#39;s <code>GROUP BY time()</code> interval, and they run at the start of openGemini&#39;s preset time boundaries. If the <code>GROUP BY time()</code> interval is 1 hour, the CQ starts executing every hour.</p><p>When CQ executes, it runs a single query for time ranges between <code>now()</code> and <code>now()</code> minus the <code>GROUP BY time()</code> interval. If the <code>GROUP BY time()</code> interval is 1 hour and the current time is 17:00, the query time range is from 16:00 to 16:59999999999.</p><h3 id="basic-syntax-examples" tabindex="-1"><a class="header-anchor" href="#basic-syntax-examples" aria-hidden="true">#</a> Basic Syntax Examples</h3><p>The following examples use sample data from the database <code>transportation</code>. The measurement <code>bus_data</code> data stores 15-minute data on the number of bus passengers and the number of complaints:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>name: bus_data
<span class="token comment">--------------</span>
<span class="token keyword">time</span>                   passengers   complaints
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">5</span>            <span class="token number">9</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">15</span>:<span class="token number">00</span>Z   <span class="token number">8</span>            <span class="token number">9</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">8</span>            <span class="token number">9</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">45</span>:<span class="token number">00</span>Z   <span class="token number">7</span>            <span class="token number">9</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">8</span>            <span class="token number">9</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">15</span>:<span class="token number">00</span>Z   <span class="token number">15</span>           <span class="token number">7</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">15</span>           <span class="token number">7</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">45</span>:<span class="token number">00</span>Z   <span class="token number">17</span>           <span class="token number">7</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T09:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">20</span>           <span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="automatically-sample-data" tabindex="-1"><a class="header-anchor" href="#automatically-sample-data" aria-hidden="true">#</a> Automatically Sample Data</h4><p>Use simple CQ to automatically downsample data from a single field and write the results to another measurement in the same database.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token string">&quot;cq_basic&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;transportation&quot;</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SELECT</span> mean<span class="token punctuation">(</span><span class="token string">&quot;passengers&quot;</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token string">&quot;average_passengers&quot;</span> <span class="token keyword">FROM</span> <span class="token string">&quot;bus_data&quot;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">1</span>h<span class="token punctuation">)</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq_basic</code> calculates the average hours of passengers from <code>bus_data</code> and stores the result in <code>average_passengers</code> in the database <code>transportation</code>.</p><p><code>cq_basic</code> is executed at one-hour intervals, the same interval as <code>GROUP BY time()</code>. Every hour, <code>cq_basic</code> runs a single query covering the time range between <code>now()</code> and <code>now()</code> minus the <code>GROUP BY time()</code> interval, that is, <code>now()</code> and the time range between the hour before <code>now()</code>.</p><p>The following is the log on the morning of August 28, 2016:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span>
<span class="token string">&quot;At 8 o&#39;clock, cq_basic executes the query with time range time &gt;= &#39;7:00&#39; AND time &lt; &#39;08:00&#39;.
cq_basic writes a point to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">7</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;At 9 o&#39;clock, cq_basic executes the query with time range time &gt;= &#39;8:00&#39; AND time &lt; &#39;09:00&#39;.
cq_basic writes a point to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">13.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result is as follows:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;average_passengers&quot;</span>
name: average_passengers
<span class="token comment">------------------------</span>
<span class="token keyword">time</span>                   mean
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">7</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">13.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="automatically-sample-data-into-another-retention-policy" tabindex="-1"><a class="header-anchor" href="#automatically-sample-data-into-another-retention-policy" aria-hidden="true">#</a> Automatically Sample Data into Another Retention Policy</h4><p>Sample data from the default retention policy to a fully specified target measurement:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token string">&quot;cq_basic_rp&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;transportation&quot;</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SELECT</span> mean<span class="token punctuation">(</span><span class="token string">&quot;passengers&quot;</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token string">&quot;transportation&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;three_weeks&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;average_passengers&quot;</span> <span class="token keyword">FROM</span> <span class="token string">&quot;bus_data&quot;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">1</span>h<span class="token punctuation">)</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq_basic_rp</code> calculates the average hours of passengers from <code>bus_data</code>, and stores the result in the measurement <code>average_passengers</code> whose RP is <code>three_weeks</code> in the database <code>tansportation</code>.</p><p><code>cq_basic_rp</code> is executed at one-hour intervals, the same interval as <code>GROUP BY time()</code>. Every hour, <code>cq_basic_rp</code> runs a single query covering the time period between <code>now()</code> and <code>now()</code> minus the <code>GROUP BY time()</code> interval, that is, <code>now()</code> and the time range between the hour before <code>now()</code>.</p><p>The following is the log output on the morning of August 28, 2016:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span>
<span class="token string">&quot;Execute the query with time &gt;=&#39;7:00&#39; AND time &lt;&#39;8:00&#39; at 8:00cq_basic_rp.
cq_basic_rp writes a point to the measurement average_passengers whose RP is three_weeks:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">7</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;At 9:00cq_basic_rp execute the query whose time range is time &gt;=&#39;8:00&#39; AND time &lt;&#39;9:00&#39;.
cq_basic_rp writes a point to the measurementaverage_passengers whose RP is three_weeks:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">13.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result is as follows:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;transportation&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;three_weeks&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;average_passengers&quot;</span>
name: average_passengers
<span class="token comment">------------------------</span>
<span class="token keyword">time</span>                   mean
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">7</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">13.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq_basic_rp</code> uses CQ and retention policies to automatically downsample data and keep those samples for varying lengths of time.</p><h4 id="automatically-sample-data-and-configure-time-boundaries-for-cq" tabindex="-1"><a class="header-anchor" href="#automatically-sample-data-and-configure-time-boundaries-for-cq" aria-hidden="true">#</a> Automatically Sample Data and Configure Time Boundaries for CQ</h4><p>Use the offset interval of the <code>GROUP BY time()</code> clause to change the default execution time of CQ and the time boundary of rendering:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token string">&quot;cq_basic_offset&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;transportation&quot;</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SELECT</span> mean<span class="token punctuation">(</span><span class="token string">&quot;passengers&quot;</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token string">&quot;average_passengers&quot;</span> <span class="token keyword">FROM</span> <span class="token string">&quot;bus_data&quot;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">1</span>h<span class="token punctuation">,</span><span class="token number">15</span>m<span class="token punctuation">)</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq_basic_offset</code> calculates the average hours of passengers from <code>bus_data</code> and stores the result in <code>average_passengers</code>.</p><p><code>cq_basic_offset</code> is executed at one-hour intervals, the same interval as <code>GROUP BY time()</code>. A 15 minute offset interval forces the CQ to execute 15 minutes after the default execution time; <code>cq_basic_offset</code> executes at 8:15 instead of 8:00.</p><p>Every hour, <code>cq_basic_offset</code> runs a single query covering the time period between <code>now()</code> and <code>now()</code> minus the <code>GROUP BY time()</code> interval, that is, <code>now()</code> and the time range between the hour before <code>now()</code>. The 15-minute offset interval shifts the generated preset time boundaries forward in the CQ&#39;s <code>WHERE</code> clause; <code>cq_basic_offset</code> queries between 7:15 and 8:14.999999999 instead of 7:00 and 7:59.999999999.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span>
<span class="token string">&quot;Execute the query with time range time &gt;= &#39;7:15&#39; AND time &lt; &#39;8:15&#39; at 8:15cq_basic_offset.
cq_basic_offset writes a data point to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">15</span>:<span class="token number">00</span>Z   <span class="token number">7.75</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;Execute the query with time range time &gt;= &#39;8:15&#39; AND time &lt;&#39;9:15&#39; at 9:15cq_basic_offset.
cq_basic_offset writes a data point to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">15</span>:<span class="token number">00</span>Z   <span class="token number">16.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result is as follows:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;average_passengers&quot;</span>
name: average_passengers
<span class="token comment">------------------------</span>
<span class="token keyword">time</span>                   mean
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">15</span>:<span class="token number">00</span>Z   <span class="token number">7.75</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">15</span>:<span class="token number">00</span>Z   <span class="token number">16.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the timestamps are 7:15 and 8:15 instead of 7:00 and 8:00.</p><h3 id="common-problems-about-basic-synax" tabindex="-1"><a class="header-anchor" href="#common-problems-about-basic-synax" aria-hidden="true">#</a> Common Problems about Basic Synax</h3><h4 id="no-data-processing-time-interval" tabindex="-1"><a class="header-anchor" href="#no-data-processing-time-interval" aria-hidden="true">#</a> No Data Processing Time Interval</h4><p>If no data falls within that time range, CQ will not write any results for the time interval. Note that the base syntax does not support using <code>fill()</code> to change the value reported for intervals with no data. <code>fill()</code> is ignored if the base syntax includes <code>fill()</code>. A workaround is to use the advanced syntax below.</p><h4 id="resample-the-previous-time-interval" tabindex="-1"><a class="header-anchor" href="#resample-the-previous-time-interval" aria-hidden="true">#</a> Resample the Previous Time Interval</h4><p>Basic CQ runs a query that covers the time period between <code>now()</code> and <code>now()</code> minus the <code>GROUP BY time()</code> interval. See Advanced Syntax for how to configure the time range for queries.</p><h4 id="backfill-result-of-old-data" tabindex="-1"><a class="header-anchor" href="#backfill-result-of-old-data" aria-hidden="true">#</a> Backfill Result of Old Data</h4><p>CQs operate on real-time data, i.e. data with timestamps that occur relative to <code>now()</code>. Use basic <code>INTO</code> queries to backfill results with data with older timestamps.</p><h4 id="the-tag-is-missing-in-the-cq-result" tabindex="-1"><a class="header-anchor" href="#the-tag-is-missing-in-the-cq-result" aria-hidden="true">#</a> The Tag is Missing in the CQ Result</h4><p>By default, all INTO queries convert any tags in the source measurement to fields in the target measurement.</p><p>Include <code>GROUP BY *</code> in the CQ to preserve the tags in the target measurement.</p><h3 id="advanced-syntax" tabindex="-1"><a class="header-anchor" href="#advanced-syntax" aria-hidden="true">#</a> Advanced Syntax</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token operator">&lt;</span>cq_name<span class="token operator">&gt;</span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>database_name<span class="token operator">&gt;</span>
RESAMPLE EVERY <span class="token operator">&lt;</span><span class="token keyword">interval</span><span class="token operator">&gt;</span> <span class="token keyword">FOR</span> <span class="token operator">&lt;</span><span class="token keyword">interval</span><span class="token operator">&gt;</span>
<span class="token keyword">BEGIN</span>
  <span class="token operator">&lt;</span>cq_query<span class="token operator">&gt;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="advanced-syntax-description" tabindex="-1"><a class="header-anchor" href="#advanced-syntax-description" aria-hidden="true">#</a> Advanced Syntax Description</h3><p>About <code>cq_name</code>，<code>database_name</code> and <code>cq_query</code>, please see the basic syntax description.</p><h4 id="when-cq-executes-and-what-timeframe-it-covers-1" tabindex="-1"><a class="header-anchor" href="#when-cq-executes-and-what-timeframe-it-covers-1" aria-hidden="true">#</a> When CQ Executes and What Timeframe it Covers</h4><p>CQs operate on real-time data. Using an advanced syntax, CQ uses the local server&#39;s timestamp along with information in the <code>RESAMPLE</code> clause and openGemini&#39;s preset time boundaries to determine the execution time and time range covered in the query.</p><p>CQs are executed at the same interval as the <code>EVERY</code> interval in the <code>RESAMPLE</code> clause, and they run at the start of openGemini&#39;s preset time boundaries. If <code>EVERY</code> interval is two hours, openGemini will execute CQ at the beginning of every two hours.</p><p>When CQ executes, it runs a single query with the time range between <code>now()</code> and <code>now()</code> minus the <code>FOR</code> interval in the <code>RESAMPLE</code> clause. If the <code>FOR</code> interval is two hours and the current time is 17:00, the time interval of the query is from 15:00 to 16:59999999999.</p><p>Both the <code>EVERY</code> interval and the <code>FOR</code> interval accept time strings. The <code>RESAMPLE</code> clause is suitable for configuring both <code>EVERY</code> and <code>FOR</code>, or one of them. If no <code>EVERY</code> interval or <code>FOR</code> interval is provided, CQ defaults to relative as the base syntax.</p><h3 id="advanced-syntax-examples" tabindex="-1"><a class="header-anchor" href="#advanced-syntax-examples" aria-hidden="true">#</a> Advanced Syntax Examples</h3><p>Sample data is as follows:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>name: bus_data
<span class="token comment">--------------</span>
<span class="token keyword">time</span>                   passengers
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T06:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">2</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T06:<span class="token number">45</span>:<span class="token number">00</span>Z   <span class="token number">4</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">5</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">15</span>:<span class="token number">00</span>Z   <span class="token number">8</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">8</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">45</span>:<span class="token number">00</span>Z   <span class="token number">7</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">8</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">15</span>:<span class="token number">00</span>Z   <span class="token number">15</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">15</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">45</span>:<span class="token number">00</span>Z   <span class="token number">17</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T09:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configure-the-execution-interval" tabindex="-1"><a class="header-anchor" href="#configure-the-execution-interval" aria-hidden="true">#</a> Configure the Execution Interval</h4><p>Use <code>EVERY</code> in <code>RESAMPLE</code> to indicate the execution interval of CQ.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token string">&quot;cq_advanced_every&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;transportation&quot;</span>
RESAMPLE EVERY <span class="token number">30</span>m
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SELECT</span> mean<span class="token punctuation">(</span><span class="token string">&quot;passengers&quot;</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token string">&quot;average_passengers&quot;</span> <span class="token keyword">FROM</span> <span class="token string">&quot;bus_data&quot;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">1</span>h<span class="token punctuation">)</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq_advanced_every</code> calculates the hourly average of <code>passengers</code> from <code>bus_data</code> and stores the result in <code>average_passengers</code> in the database <code>transportation</code>.</p><p><code>cq_advanced_every</code> is executed at 30-minute intervals, the same interval as <code>EVERY</code>. Every 30 minutes, <code>cq_advanced_every</code> runs a query covering the time range of the current time period, which is the one-hour time period intersected by <code>now()</code>.</p><p>The following is the log output on the morning of August 28, 2016:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span>
<span class="token string">&quot;Execute the query with time range time &gt;= &#39;7:00&#39; AND time &lt; &#39;8:00&#39; at 8:00cq_basic_every.
cq_basic_every writes a data point to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">7</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;Execute the query with time range time &gt;= &#39;8:00&#39; AND time &lt; &#39;9:00&#39; at 8:30cq_basic_every.
cq_basic_every writes a data point to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">12.6667</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;Execute the query with time range time &gt;= &#39;8:00&#39; AND time &lt; &#39;9:00&#39; at 9:00cq_basic_every.
cq_basic_every writes a data point to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">13.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result is as follows:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;average_passengers&quot;</span>
name: average_passengers
<span class="token comment">------------------------</span>
<span class="token keyword">time</span>                   mean
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">7</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">13.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that <code>cq_advanced_every</code> computes the result twice for the 8:00 time interval. The first time, it runs at 8:30, calculating the average for each available data point between 8:00 and 9:00 (8, 15, and 15). The second time, it runs at 9:00, calculating the average for each available data point between 8:00 and 9:00 (8, 15, 15, and 17). Due to the way openGemini handles duplicate points, TODO: pending verification.</p><h4 id="configure-the-resampling-time-range-of-cq" tabindex="-1"><a class="header-anchor" href="#configure-the-resampling-time-range-of-cq" aria-hidden="true">#</a> Configure the Resampling Time Range of CQ</h4><p>Use <code>FOR</code> in <code>RESAMPLE</code> to specify the length of the CQ interval.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token string">&quot;cq_advanced_for&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;transportation&quot;</span>
RESAMPLE <span class="token keyword">FOR</span> <span class="token number">1</span>h
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SELECT</span> mean<span class="token punctuation">(</span><span class="token string">&quot;passengers&quot;</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token string">&quot;average_passengers&quot;</span> <span class="token keyword">FROM</span> <span class="token string">&quot;bus_data&quot;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">30</span>m<span class="token punctuation">)</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq_advanced_for</code> calculates the 30-minute average of <code>passengers</code> from <code>bus_data</code> and stores the result in <code>average_passengers</code> in the database <code>transportation</code>.</p><p><code>cq_advanced_for</code> is executed at 30-minute intervals, the same interval as <code>GROUP BY time()</code>. Every 30 minutes, <code>cq_advanced_for</code> runs a query covering the time period <code>now()</code> and <code>now()</code> minus the interval in <code>FOR</code>, which is <code>now()</code> and <code>now()</code> before A time range between one hour.</p><p>The following is the log output on the morning of August 28, 2016:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span>
<span class="token string">&quot;At 8:00cq_advanced_for executes the query with time range time &gt;= &#39;7:00&#39; AND time &lt;&#39;8:00&#39;.
cq_advanced_for writes two data points to average_passengers&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">6.5</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">7.5</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;At 8:30cq_advanced_for executes the query with time range time &gt;= &#39;7:30&#39; AND time &lt;&#39;8:30&#39;.
cq_advanced_for writes two data points to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">7.5</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">11.5</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;At 9:00cq_advanced_for executes the query with time range time&gt;=&#39;8:00&#39; AND time &lt;&#39;9:00&#39;.
cq_advanced_for writes two data points to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">11.5</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that <code>cq_advanced_for</code> calculates the result twice for each interval. CQ calculates the average of 7:30 at 8:00 and 8:30, and the average of 8:00 at 8:30 and 9:00.</p><p>The result is as follows:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;average_passengers&quot;</span>
name: average_passengers
<span class="token comment">------------------------</span>
<span class="token keyword">time</span>                   mean
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">6.5</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">7.5</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">11.5</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configure-execution-interval-and-cq-time-range" tabindex="-1"><a class="header-anchor" href="#configure-execution-interval-and-cq-time-range" aria-hidden="true">#</a> Configure Execution Interval and CQ Time Range</h4><p>Use <code>EVERY</code> and <code>FOR</code> in the <code>RESAMPLE</code> clause to specify the execution interval of the CQ and the length of the time range of the CQ.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token string">&quot;cq_advanced_every_for&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;transportation&quot;</span>
RESAMPLE EVERY <span class="token number">1</span>h <span class="token keyword">FOR</span> <span class="token number">90</span>m
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SELECT</span> mean<span class="token punctuation">(</span><span class="token string">&quot;passengers&quot;</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token string">&quot;average_passengers&quot;</span> <span class="token keyword">FROM</span> <span class="token string">&quot;bus_data&quot;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">30</span>m<span class="token punctuation">)</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq_advanced_every_for</code> calculates the 30-minute average of <code>passengers</code> from <code>bus_data</code> and stores the result in <code>average_passengers</code> in the database <code>transportation</code>.</p><p><code>cq_advanced_every_for</code> is executed at 1-hour intervals, which are the same as <code>EVERY</code> intervals. Every 1 hour, <code>cq_advanced_every_for</code> runs a query covering the time period <code>now()</code> and <code>now()</code> minus the interval in <code>FOR</code>, that is, <code>now()</code> and <code>now()</code> before Time range between 90 minutes.</p><p>The following is the log output on the morning of August 28, 2016:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span>
<span class="token string">&quot;At 8:00cq_advanced_every_for execute the query with time range time&gt;=&#39;6:30&#39; AND time &lt;&#39;8:00&#39;.
cq_advanced_every_for writes three data points to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T06:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">3</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">6.5</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">7.5</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;At 9:00cq_advanced_every_for execute the query with time range time &gt;= &#39;7:30&#39; AND time &lt;&#39;9:00&#39;.
cq_advanced_every_for writes three data points to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">7.5</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">11.5</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that <code>cq_advanced_every_for</code> calculates the result twice for each interval. CQ calculates an average of 7:30 at 8:00 and 9:00.</p><p>The result is as follows:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;average_passengers&quot;</span>
name: average_passengers
<span class="token comment">------------------------</span>
<span class="token keyword">time</span>                   mean
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T06:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">3</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">6.5</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">7.5</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">11.5</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">30</span>:<span class="token number">00</span>Z   <span class="token number">16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configure-the-time-range-of-cq-and-fill-in-empty-values" tabindex="-1"><a class="header-anchor" href="#configure-the-time-range-of-cq-and-fill-in-empty-values" aria-hidden="true">#</a> Configure the Time Range of CQ and Fill in Empty Values</h4><p>Use <code>FOR</code> intervals and <code>fill()</code> to change interval values without data. Note that at least one data point must be within the FOR interval for fill() to run. If no data falls within the <code>FOR</code> interval, CQ will not write any points to the target measurement.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> CONTINUOUS QUERY <span class="token string">&quot;cq_advanced_for_fill&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;transportation&quot;</span>
RESAMPLE <span class="token keyword">FOR</span> <span class="token number">2</span>h
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SELECT</span> mean<span class="token punctuation">(</span><span class="token string">&quot;passengers&quot;</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token string">&quot;average_passengers&quot;</span> <span class="token keyword">FROM</span> <span class="token string">&quot;bus_data&quot;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">1</span>h<span class="token punctuation">)</span> fill<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cq_advanced_for_fill</code> calculates the 1-hour average of <code>passengers</code> from <code>bus_data</code>, and stores the result in <code>average_passengers</code> in the database <code>transportation</code>. and will write the value <code>1000</code> during the time interval with no result.</p><p><code>cq_advanced_for_fill</code> is executed at 1-hour intervals, the same interval as <code>GROUP BY time()</code>. Every 1 hour, <code>cq_advanced_for_fill</code> runs a query covering the time period <code>now()</code> and <code>now()</code> minus the interval in <code>FOR</code>, that is, <code>now()</code> and <code>now()</code> before A time range between two hours.</p><p>The following is the log output on the morning of August 28, 2016:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span>
<span class="token string">&quot;At 6:00cq_advanced_for_fill executes the query with time range time&gt;=&#39;4:00&#39; AND time &lt;&#39;6:00&#39;. cq_advanced_for_fill does not write any data points to average_passengers because bus_data has no data in that time range:&quot;</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;At 7:00cq_advanced_for_fill executes the query with time range time&gt;=&#39;5:00&#39; AND time &lt;&#39;7:00&#39;. cq_advanced_for_fill writes two data points to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token keyword">time</span>                   mean
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T05:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">1000</span>          <span class="token operator">&lt;</span><span class="token comment">------ fill(1000)</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T06:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">3</span>             <span class="token operator">&lt;</span><span class="token comment">------ average of 2 and 4</span>
<span class="token operator">&gt;</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token operator">&gt;</span>
<span class="token string">&quot;At 11:00cq_advanced_for_fill executes the query for the time range time &gt;= &#39;9:00&#39; AND time &lt;&#39;11:00&#39;. cq_advanced_for_fill writes two data points to average_passengers:&quot;</span>
<span class="token operator">&gt;</span>
    name: average_passengers
    <span class="token comment">------------------------</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T09:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">20</span>            <span class="token operator">&lt;</span><span class="token comment">------ average of 20</span>
    <span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T10:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">1000</span>          <span class="token operator">&lt;</span><span class="token comment">------ fill(1000)</span>
<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At <strong>12:00</strong> <code>cq_advanced_for_fill</code> executes the query for the time range <code>time&gt;=&#39;10:00&#39;AND time &lt;&#39;12:00&#39;</code>. <code>cq_advanced_for_fill</code> does not write any data points to <code>average_passengers</code> because there is no data in <code>bus_data</code> for that time range.</p><p>The result is as follows:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;average_passengers&quot;</span>
name: average_passengers
<span class="token comment">------------------------</span>
<span class="token keyword">time</span>                   mean
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T05:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">1000</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T06:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">3</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T07:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">7</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T08:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">13.75</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T09:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">20</span>
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">28</span>T10:<span class="token number">00</span>:<span class="token number">00</span>Z   <span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p><code>fill(previous)</code> will not fill the interval with data if the previous value was outside the query time.</p></div><h3 id="common-problems-about-advanced-synax" tabindex="-1"><a class="header-anchor" href="#common-problems-about-advanced-synax" aria-hidden="true">#</a> Common Problems about Advanced Synax</h3><h4 id="if-every-interval-is-greater-than-group-by-time-interval" tabindex="-1"><a class="header-anchor" href="#if-every-interval-is-greater-than-group-by-time-interval" aria-hidden="true">#</a> If <code>EVERY</code> Interval is Greater than <code>GROUP BY time()</code> Interval</h4><p>If the <code>EVERY</code> interval is greater than the <code>GROUP BY time()</code> interval, the CQ is executed at the same interval as the <code>EVERY</code> interval and runs a single query that covers <code>now()</code> and <code>now()</code> minus The time range between <code>EVERY</code> intervals (not between <code>now()</code> and <code>now()</code> minus <code>GROUP BY time()</code> intervals).</p><p>For example, if the <code>GROUP BY time()</code> interval is 5m, and the <code>EVERY</code> interval is 10m, then the CQ is executed every 10 minutes. Every 10 minutes, CQ runs a query covering the period between <code>now()</code> and <code>now()</code> minus the <code>EVERY</code> interval, i.e. between <code>now()</code> and ten minutes before <code>now()</code> time range.</p><p>This behavior is intentional and prevents CQ from losing data between execution times.</p><h2 id="drop-continuous-query" tabindex="-1"><a class="header-anchor" href="#drop-continuous-query" aria-hidden="true">#</a> DROP CONTINUOUS QUERY</h2><h3 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h3><p>Delete CQ from a specified database:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> CONTINUOUS QUERY <span class="token operator">&lt;</span>cq_name<span class="token operator">&gt;</span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>database_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>DROP CONTINUOUS QUERY</code> returns an empty result.</p><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p>Delete the CQ <code>idle_hands</code> from the database <code>telegraf</code>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">DROP</span> CONTINUOUS QUERY <span class="token string">&quot;idle_hands&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;telegraf&quot;</span><span class="token punctuation">\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="show-continuous-queries" tabindex="-1"><a class="header-anchor" href="#show-continuous-queries" aria-hidden="true">#</a> SHOW CONTINUOUS QUERIES</h2><h3 id="syntax-1" tabindex="-1"><a class="header-anchor" href="#syntax-1" aria-hidden="true">#</a> Syntax</h3><p>List all CQs on an openGemini instance:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> CONTINUOUS QUERIES
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>SHOW CONTINUOUS QUERIES</code> group by database.</p><h3 id="examples-1" tabindex="-1"><a class="header-anchor" href="#examples-1" aria-hidden="true">#</a> Examples</h3><p>The following shows the CQs on database <code>test1</code> and database <code>test2</code>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> CONTINUOUS QUERIES
name: test1
<span class="token operator">+</span><span class="token comment">-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="token operator">|</span> name  <span class="token operator">|</span> query                                                                                                                                                                                   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="token operator">|</span> cq1_1 <span class="token operator">|</span> <span class="token keyword">CREATE</span> CONTINUOUS QUERY cq1_1 <span class="token keyword">ON</span> test1 RESAMPLE EVERY <span class="token number">1</span>h <span class="token keyword">FOR</span> <span class="token number">90</span>m <span class="token keyword">BEGIN</span> <span class="token keyword">SELECT</span> mean<span class="token punctuation">(</span>passengers<span class="token punctuation">)</span> <span class="token keyword">INTO</span> test1<span class="token punctuation">.</span>autogen<span class="token punctuation">.</span>average_passengers <span class="token keyword">FROM</span> test1<span class="token punctuation">.</span>autogen<span class="token punctuation">.</span>bus_data <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">30</span>m<span class="token punctuation">)</span> <span class="token keyword">END</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="token number">2</span> <span class="token keyword">columns</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span>

name: test2
<span class="token operator">+</span><span class="token comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="token operator">|</span> name  <span class="token operator">|</span> query                                                                                                                                                                              <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="token operator">|</span> cq2_1 <span class="token operator">|</span> <span class="token keyword">CREATE</span> CONTINUOUS QUERY cq2_1 <span class="token keyword">ON</span> test2 RESAMPLE EVERY <span class="token number">1</span>h <span class="token keyword">FOR</span> <span class="token number">30</span>m <span class="token keyword">BEGIN</span> <span class="token keyword">SELECT</span> <span class="token function">min</span><span class="token punctuation">(</span>passengers<span class="token punctuation">)</span> <span class="token keyword">INTO</span> test2<span class="token punctuation">.</span>autogen<span class="token punctuation">.</span>min_passengers <span class="token keyword">FROM</span> test2<span class="token punctuation">.</span>autogen<span class="token punctuation">.</span>bus_data <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">15</span>m<span class="token punctuation">)</span> <span class="token keyword">END</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="token number">2</span> <span class="token keyword">columns</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,129),p=[o];function r(c,l){return n(),a("div",null,p)}const d=s(t,[["render",r],["__file","continue_query.html.vue"]]);export{d as default};
