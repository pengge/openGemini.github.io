import{_ as o,X as t,Y as r,Z as e,a1 as a,$ as s,a3 as i,C as l}from"./framework-a5f096d1.js";const d={},c=i('<h1 id="clone-build-run" tabindex="-1"><a class="header-anchor" href="#clone-build-run" aria-hidden="true">#</a> Clone-Build-Run</h1><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2><h3 id="compile-environment-information" tabindex="-1"><a class="header-anchor" href="#compile-environment-information" aria-hidden="true">#</a> Compile environment information</h3>',3),p={href:"https://go.dev/dl/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},m={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},v=i(`<h3 id="how-to-set-go-environment-variables" tabindex="-1"><a class="header-anchor" href="#how-to-set-go-environment-variables" aria-hidden="true">#</a> How to set GO environment variables</h3><p>Open ~/.profile configuration file and add the following configurations to the end of the file:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Set GOPATH (requires custom directory)</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span>/path/to/dir
<span class="token comment"># Set up domestic proxy</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct
<span class="token comment"># Turn on go mod mode</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GONOSUMDB</span><span class="token operator">=</span>*
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOSUMDB</span><span class="token operator">=</span>off
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> Clone</h2><p>Clone the source code to your development machine:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/openGemini/openGemini.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> Build</h2><ol><li>Enter the home directory.</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> openGemini
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Compiling.</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 build.py <span class="token parameter variable">--clean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>::: tips</p><p>The compiled binary file is in the build directory</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> build
<span class="token operator">&gt;</span> ts-cli ts-meta ts-monitor ts-server ts-sql ts-store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ts-server</code> is the standalone version.</p><p>:::</p><h2 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> Run</h2><p>Run the stand-alone version.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./build/ts-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>::: tips</p><blockquote><p>For version v1.0.1 and earlier, you need to specify the configuration file to start the <code>ts-server</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./build/ts-server <span class="token parameter variable">-config</span> config/openGemini.singlenode.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you want to start it in the background, you can use the following command.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> ./build/ts-server <span class="token parameter variable">-config</span> config/openGemini.singlenode.conf <span class="token operator">&gt;</span> server_extra.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p>:::</p><h2 id="connect" tabindex="-1"><a class="header-anchor" href="#connect" aria-hidden="true">#</a> Connect</h2><p>To facilitate various queries of the database, openGemini provides a command-line application called openGemini CLI (<code>ts-cli</code> for short). To enter the openGemini command line, you only need to go to the directory where <code>ts-cli</code> is located and execute <code>ts-cli</code> in the terminal.</p><p>Use the client to connect to openGemini you can use the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./ts-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>Tips:</strong></p><p>By default, it connects to <code>127.0.0.1:8086</code>, but you can connect to other hosts using the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./ts-cli <span class="token parameter variable">-host</span> <span class="token number">192.168</span>.0.1 <span class="token parameter variable">-port</span> <span class="token number">8086</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>For more usage, please use the following command to explore:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./ts-cli <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote>`,27);function b(g,f){const n=l("ExternalLinkIcon");return t(),r("div",null,[c,e("ul",null,[e("li",null,[e("a",p,[a("GO"),s(n)]),a(" : version v1.18+")]),e("li",null,[e("a",u,[a("Python"),s(n)]),a(" : version v3.7+")]),e("li",null,[e("a",h,[a("Git"),s(n)]),a(" : The openGemini source code is hosted on GitHub as a git repository. To work with the git repository, please "),e("a",m,[a("install Git"),s(n)]),a(".")])]),v])}const x=o(d,[["render",b],["__file","build_source_code.html.vue"]]);export{x as default};
