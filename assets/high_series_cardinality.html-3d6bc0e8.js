import{_ as p,X as d,Y as r,Z as n,a1 as s,$ as a,a0 as e,a3 as o,C as l}from"./framework-a5f096d1.js";const c={},u=o(`<p>在数据库中，基数是指数据库的特定列或字段中包含的唯一值的数量。时间序列数据往往包含描述该数据的元数据（习惯称为“TAG”）。通常，主要时间序列数据或元数据会被索引，以提高查询性能，以便您可以快速找到与之匹配的所有值。时间序列数据集的基数通常由每个单独索引列的基数的交叉乘积定义。如果有多个索引列，每个列都有大量唯一值，那么交叉乘积的基数可能会变得非常大。这就是软件开发人员在谈论具有“高基数”的时间序列数据集时通常的意思。</p><p>高基数问题直接表现为索引膨胀，内存资源占用高，查询性能下降。该问题是所有时序数据库都会面临的一个难题，openGemini高基数存储引擎提供了该问题的一个解决方案。本文主要介绍高基数存储引擎的配置和使用。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>高基数存储引擎支持InfluxDB Line Protocol协议（简称行协议）和Apache Arrow Flight协议（简称列协议）写入，从实际测试效果来看，列协议写入性能更优。</p><p>列协议写入配置如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[http]
  flight-address = &quot;{{addr}}:8087&quot; // 8087为列协议写入端口
  flight-enabled = false           // 开启列协议，集群配置文件openGemini.conf中默认关闭，单机版中默认开启
  flight-ch-factor = 2             // 列协议缓存方法系数，可调节列协议性能，默认即可。单机版中该配置项被隐藏
  flight-auth-enabled = false      // 列协议鉴权开关，默认关闭
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，增加了一个隐藏配置项</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[data]
  snapshot-table-number = 1   //数据排序刷盘的并发数，默认值为1，最大为8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当写入流量非常大的情形下，可以添加该配置项，将并发数适当调大，提高数据下盘效率。</p><h2 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表" aria-hidden="true">#</a> 创建表</h2>`,10),m=o(`<h2 id="查询分区键" tabindex="-1"><a class="header-anchor" href="#查询分区键" aria-hidden="true">#</a> 查询分区键</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; SHOW SHARDKEY FROM rtt
shard_key  type ShardGroup
---------  ---- ----------
[deviceIp] hash 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SHOW SHARDKEY</code>仅对使用了高基数存储引擎的表有效</p><h2 id="查询排序健" tabindex="-1"><a class="header-anchor" href="#查询排序健" aria-hidden="true">#</a> 查询排序健</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> SORTKEY <span class="token keyword">FROM</span> rtt
sort_key
<span class="token comment">--------</span>
<span class="token punctuation">[</span>deviceIp campus <span class="token keyword">time</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SHOW SORTKEY</code>仅对使用了高基数存储引擎的表有效</p><h2 id="查询表结构-schema" tabindex="-1"><a class="header-anchor" href="#查询表结构-schema" aria-hidden="true">#</a> 查询表结构(Schema)</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> <span class="token keyword">SCHEMA</span> <span class="token keyword">FROM</span> mst0<span class="token punctuation">;</span>
shard_key <span class="token keyword">type</span> ShardGroup engine_type primary_key sort_key
<span class="token comment">--------- ---- ---------- ----------- ----------- --------</span>
<span class="token punctuation">[</span>tag1<span class="token punctuation">]</span>    <span class="token keyword">hash</span> <span class="token number">1</span>          columnstore <span class="token punctuation">[</span>tag1<span class="token punctuation">]</span>      <span class="token punctuation">[</span>tag1 field1<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h2>`,9),h=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("ol",null,[n("li",null,[n("p",null,"当前高基数存储引擎支持的聚合算子：count/sum/min/max/mean/first/last/percentile")]),n("li",null,[n("p",null,"表达式过滤不支持正则匹配和复合表达式（如a+b>c)")]),n("li",null,[n("p",null,"支持嵌套查询")])])],-1),k=o(`<h3 id="sample数据" tabindex="-1"><a class="header-anchor" href="#sample数据" aria-hidden="true">#</a> Sample数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 创建数据库db0</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db0

<span class="token comment"># 创建表mst0</span>
<span class="token keyword">USE</span> db0
<span class="token keyword">CREATE</span> MEASUREMENT mst0 <span class="token punctuation">(</span>country tag<span class="token punctuation">,</span>  <span class="token string">&quot;name&quot;</span> tag<span class="token punctuation">,</span> age int64<span class="token punctuation">,</span>  height float64<span class="token punctuation">,</span>  address string<span class="token punctuation">,</span> alive <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token keyword">WITH</span>  ENGINETYPE <span class="token operator">=</span> columnstore  PRIMARYKEY <span class="token keyword">time</span><span class="token punctuation">,</span>country<span class="token punctuation">,</span><span class="token string">&quot;address&quot;</span> SORTKEY <span class="token keyword">time</span><span class="token punctuation">,</span>country<span class="token punctuation">,</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span>

<span class="token comment"># 原始数据查询</span>
<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mst0
name: mst0
<span class="token keyword">time</span>                address   age alive country    height name
<span class="token comment">----                -------   --- ----- -------    ------ ----</span>
<span class="token number">1629129600000000000</span> shenzhen  <span class="token number">12</span>  <span class="token boolean">true</span>  <span class="token string">&quot;china&quot;</span>    <span class="token number">70</span>     <span class="token string">&quot;azhu&quot;</span>
<span class="token number">1629129601000000000</span> shanghai  <span class="token number">20</span>  <span class="token boolean">false</span> <span class="token string">&quot;american&quot;</span> <span class="token number">80</span>     <span class="token string">&quot;alan&quot;</span>
<span class="token number">1629129602000000000</span> beijin    <span class="token number">3</span>   <span class="token boolean">true</span>  <span class="token string">&quot;germany&quot;</span>  <span class="token number">90</span>     <span class="token string">&quot;alang&quot;</span>
<span class="token number">1629129603000000000</span> guangzhou <span class="token number">30</span>  <span class="token boolean">false</span> <span class="token string">&quot;japan&quot;</span>    <span class="token number">121</span>    <span class="token string">&quot;ahui&quot;</span>
<span class="token number">1629129604000000000</span> chengdu   <span class="token number">35</span>  <span class="token boolean">true</span>  <span class="token string">&quot;canada&quot;</span>   <span class="token number">138</span>    <span class="token string">&quot;aqiu&quot;</span>
<span class="token number">1629129605000000000</span> wuhan     <span class="token number">48</span>  <span class="token boolean">true</span>  <span class="token string">&quot;china&quot;</span>    <span class="token number">149</span>    <span class="token string">&quot;agang&quot;</span>
<span class="token number">1629129606000000000</span> wuhan     <span class="token number">52</span>  <span class="token boolean">true</span>  <span class="token string">&quot;american&quot;</span> <span class="token number">153</span>    <span class="token string">&quot;agan&quot;</span>
<span class="token number">1629129607000000000</span> anhui     <span class="token number">28</span>  <span class="token boolean">false</span> <span class="token string">&quot;germany&quot;</span>  <span class="token number">163</span>    <span class="token string">&quot;alin&quot;</span>
<span class="token number">1629129608000000000</span> xian      <span class="token number">32</span>  <span class="token boolean">true</span>  <span class="token string">&quot;japan&quot;</span>    <span class="token number">173</span>    <span class="token string">&quot;ali&quot;</span>
<span class="token number">1629129609000000000</span> hangzhou  <span class="token number">60</span>  <span class="token boolean">false</span> <span class="token string">&quot;canada&quot;</span>   <span class="token number">180</span>    <span class="token string">&quot;ali&quot;</span>
<span class="token number">1629129610000000000</span> nanjin    <span class="token number">102</span> <span class="token boolean">true</span>  <span class="token string">&quot;canada&quot;</span>   <span class="token number">191</span>    <span class="token string">&quot;ahuang&quot;</span>
<span class="token number">1629129611000000000</span> zhengzhou <span class="token number">123</span> <span class="token boolean">false</span> <span class="token string">&quot;china&quot;</span>    <span class="token number">203</span>    <span class="token string">&quot;ayin&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> SELECT</h3><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> COLUMN_CLAUSES FROM_CLAUSE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>COLUMN_CLAUSES可支持字段TAG或FIELD的明细与聚合查询。</p><p><strong>差异对比</strong></p><table><thead><tr><th></th><th>高基数存储引擎</th><th>默认存储引擎</th></tr></thead><tbody><tr><td>SELECT <em>country</em> FROM <em>mst0</em> //<em>country</em>为TAG</td><td>支持</td><td>不支持</td></tr><tr><td>SELECT <em>age</em> FROM <em>mst0</em> //age为FIELD</td><td>支持</td><td>支持</td></tr><tr><td>SELECT <em>country</em>, <em>age</em> FROM <em>mst0</em></td><td>支持</td><td>支持</td></tr><tr><td>SELECT count(<em>country</em>) FROM mst0 //<em>country</em>为TAG</td><td>支持</td><td>不支持</td></tr><tr><td>SELECT count(<em>age</em>) FROM mst0</td><td>支持</td><td>支持</td></tr></tbody></table><h3 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> GROUP BY</h3><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> COLUMN_CLAUSES FROM_CLAUSE <span class="token punctuation">[</span>WHERE_CLAUSE<span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">[</span><span class="token operator">*</span> <span class="token operator">|</span> <span class="token operator">&lt;</span>tag_key<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>field_key<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>GROUP BY可支持<strong>字符串</strong>字段TAG或FIELD的明细与聚合查询。</p><p><strong>差异对比</strong></p><table><thead><tr><th></th><th>高基数存储引擎</th><th>默认存储引擎</th></tr></thead><tbody><tr><td>SELECT &quot;name&quot; FROM mst0 GROUP BY country //“name”为TAG</td><td>支持</td><td>不支持</td></tr><tr><td>SELECT mean(height) FROM mst0 GROUP BY country //country为TAG</td><td>支持</td><td>支持</td></tr><tr><td>SELECT mean(height) FROM mst0 GROUP BY address //address为FIELD</td><td>支持</td><td>不支持</td></tr><tr><td>SELECT &quot;name&quot; FROM mst0 GROUP BY address //“name”为TAG，address为FIELD</td><td>支持</td><td>不支持</td></tr></tbody></table><h3 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by" aria-hidden="true">#</a> ORDER BY</h3><p>语法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT COLUMN_CLAUSES FROM_CLAUSE [WHERE_CLAUSE] [GROUP_BY_CLAUSE] ORDER BY COLUMN_CLAUSES [ASC|DESC]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>openGemini高基维引擎默认不对查询结果进行排序，若要求返回结果有序，可使用ORDER BY排序，支持对TIME、TAG、FIELD或聚合结果等进行排序。</p><p>ORDER BY默认升序ASC，可按照排序字段分别指定升序ASC或降序DESC。</p><p><strong>差异对比</strong></p><table><thead><tr><th></th><th>高基数存储引擎</th><th>默认存储引擎</th></tr></thead><tbody><tr><td>SELECT mean(height) as avg_height <br>FROM mst0 <br>WHERE time &gt;=1629129600000000000 AND time &lt;=1629129611000000000 <br>GROUP BY time(5s), country <br>FILL(none) <br>ORDER BY country, avg_height, time</td><td>支持</td><td>不支持</td></tr><tr><td>SELECT mean(height) as avg_height <br>FROM mst0 <br>WHERE time &gt;=1629129600000000000 AND time &lt;=1629129611000000000 <br>GROUP BY time(5s),country <br>FILL(none) <br>ORDER BY country DESC, avg_height DESC, time ASC</td><td>支持</td><td>不支持</td></tr></tbody></table><h2 id="数据写入" tabindex="-1"><a class="header-anchor" href="#数据写入" aria-hidden="true">#</a> 数据写入</h2><h3 id="行协议" tabindex="-1"><a class="header-anchor" href="#行协议" aria-hidden="true">#</a> 行协议</h3>`,23),b=n("h3",{id:"列协议",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#列协议","aria-hidden":"true"},"#"),s(" 列协议")],-1);function v(g,E){const t=l("RouterLink"),i=l("font");return d(),r("div",null,[u,n("p",null,[s("高基数存储引擎下创建表，参考"),a(t,{to:"/zh/guide/schema/measurement.html"},{default:e(()=>[s("创建表文档")]),_:1})]),m,n("p",null,[s("与openGemini默认存储引擎相比，查询语法基本一致，"),a(t,{to:"/zh/guide/query_data/SELECT.html"},{default:e(()=>[s("参考数据查询文档")]),_:1})]),h,a(i,{color:"red"},{default:e(()=>[s("**下面主要列举高基维引擎的查询语法差异之处，主要为SELECT，GROUP BY，ORDER BY三个方面**")]),_:1}),k,n("p",null,[s("行协议写入参考"),a(t,{to:"/zh/guide/write_data/line_protocol.html"},{default:e(()=>[s("openGemini数据行协议写入")]),_:1})]),b,n("p",null,[s("列协议写入参考"),a(t,{to:"/zh/guide/write_data/column_protocol_tutorials.html"},{default:e(()=>[s("openGemini数据列协议写入")]),_:1})])])}const y=p(c,[["render",v],["__file","high_series_cardinality.html.vue"]]);export{y as default};
