import{_ as n,X as t,Y as o,Z as s,a1 as a,$ as r,a0 as p,a3 as c,C as i}from"./framework-a5f096d1.js";const l={},d={class:"hint-container tip"},u=s("p",{class:"hint-container-title"},"Tips",-1),h=c(`<h2 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> MATCH</h2><p>An exact match means that only the entire word matches the keyword. For example, in log retrieval, all relevant log information is retrieved according to a specific error code.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> server_nameï¼Œmessage <span class="token keyword">FROM</span> mst <span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">&quot;504&quot;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> server_name<span class="token operator">=</span><span class="token string">&quot;server0&quot;</span> <span class="token operator">AND</span> <span class="token keyword">time</span> <span class="token operator">&gt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Query all logs of &quot;server0&quot; service which contained error code &#39;504&#39; in the past day</p><h2 id="matchphrase" tabindex="-1"><a class="header-anchor" href="#matchphrase" aria-hidden="true">#</a> MATCHPHRASE</h2><p>Like MATCH query, phrase matching is one of the most commonly used query methods in standard full-text search. Both MATCH and MATCHPHRASE are exact matches. The difference is that MATCHPHRASE is a query by phrase, while MATCH is a single word.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token keyword">FROM</span> mst <span class="token keyword">WHERE</span> MATCHPHRASE<span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">&#39;GET images backnews.gif&#39;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token keyword">time</span> <span class="token operator">&gt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Query the total number of logs containing the content of &#39;GET images backnews.gif&#39; in the past 1 hour</p><h2 id="like" tabindex="-1"><a class="header-anchor" href="#like" aria-hidden="true">#</a> LIKE</h2><p>Fuzzy matching is another common full-text search query method, which can return a type of string with a certain prefix or suffix. For example, in service logs, some errors have fixed prefixes, but the error codes are different. , but all indicate a certain type of error message, then you will think of using fuzzy matching</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mst <span class="token keyword">WHERE</span> message <span class="token operator">LIKE</span> <span class="token string">&#39;NET%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Query all log data containing keywords starting with &#39;NET&#39;</p>`,12);function k(m,g){const e=i("RouterLink");return t(),o("div",null,[s("div",d,[u,s("p",null,[a("relate entries "),r(e,{to:"/guide/schema/measurement.html#text-search"},{default:p(()=>[a("create measurement")]),_:1})])]),h])}const v=n(l,[["render",k],["__file","logs.html.vue"]]);export{v as default};
