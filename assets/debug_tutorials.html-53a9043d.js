import{_ as e,X as a,Y as s,a3 as n}from"./framework-a5f096d1.js";const o="/assets/deployment_connection-f29a46e0.png",t="/assets/ssh_configuration-80a68c35.png",i="/assets/deployment_mappings-40850031.png",l="/assets/go_remote-db0ee19f.png",r="/assets/example_breakpoint-1cdea404.png",p="/assets/example_statement-46ce481d.png",d="/assets/example_result-e9a84b5d.png",c="/assets/next_point-fd7544c6.png",g={},u=n('<h1 id="debug-教程" tabindex="-1"><a class="header-anchor" href="#debug-教程" aria-hidden="true">#</a> Debug 教程</h1><blockquote><ul><li>已安装WSL2和较新版本的goland</li><li>WSL2已安装并启动SSH服务</li></ul></blockquote><h2 id="windows侧操作" tabindex="-1"><a class="header-anchor" href="#windows侧操作" aria-hidden="true">#</a> Windows侧操作</h2><ol><li><p>clone项目</p></li><li><p><strong>在goland配置SSH连接</strong> 2.1 通过goland的菜单栏Tools–&gt;Deployment–&gt;Configuration来添加远程调试的配置 2.2 创建一个SFTP协议的配置，如图</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2.3 然后进入SSH configuration ， 如图输入SSH连接所需的信息，点击TEST CONNECTION后确定连接成功, 保存。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2.4 进入Mappings， 建立项目目录的映射 <img src="'+i+'" alt="" loading="lazy"> 2.5 上传项目文件到WSL2 (用于同步项目内容如果已经上传过请忽略此步骤)<br>项目目录右键-&gt;Deployment- &gt;上传项目到WSL2</p></li><li><p><strong>Run/Debug的配置</strong> 3.1 进入goland的菜单栏Runs–&gt;Configurations 3.2 创建一个Go Remote , Host 填用WSL2的 eth0 ip, 保存。</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><h2 id="wsl2侧操作" tabindex="-1"><a class="header-anchor" href="#wsl2侧操作" aria-hidden="true">#</a> WSL2侧操作</h2><blockquote><p>在WSL2中openGemini的目录</p></blockquote><ol><li>编译二进制文件（如果已经编译，请忽略此步骤）</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  python3 build<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>在WSL2中安装较新版本delve</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>  <span class="token keyword">go</span> install github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>delve<span class="token operator">/</span>delve<span class="token operator">/</span>cmd<span class="token operator">/</span>dlv@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>启动debug</li></ol><blockquote><p>若需指定配置文件请在该命令后加上 -- -config [配置文件path]</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> dlv debug <span class="token parameter variable">--headless</span> <span class="token parameter variable">--listen</span><span class="token operator">=</span>:2345 --api-version<span class="token operator">=</span><span class="token number">2</span> --accept-multiclient app/ts-server/main.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="最后建立连接并debug" tabindex="-1"><a class="header-anchor" href="#最后建立连接并debug" aria-hidden="true">#</a> 最后建立连接并debug</h2><ol><li><p>在goland点击调试，显示已连接则表明成功。</p></li><li><p>另开一个虚拟机窗口进入openGemini 命令行进行debug。 如：</p></li></ol><p>2.1查询命令会调用serveQuery , 示例将断点打在serveQuery里面(handler.go的414行) <img src="`+r+'" alt="" loading="lazy"> 2.2 在openGemini命令行执行select * from h2o_feet on NOAA_water_database <img src="'+p+'" alt="" loading="lazy"> 2.3 程序运行到断点处暂停。 <img src="'+d+'" alt="" loading="lazy"> 2.4 点击这里向后移动断点 <img src="'+c+'" alt="" loading="lazy"></p>',16),m=[u];function b(h,_){return a(),s("div",null,m)}const v=e(g,[["render",b],["__file","debug_tutorials.html.vue"]]);export{v as default};
