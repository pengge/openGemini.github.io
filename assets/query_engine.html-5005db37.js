import{_ as e,X as p,Y as o,Z as s,a1 as n,$ as c,a0 as i,a3 as a,C as l}from"./framework-a5f096d1.js";const u="/assets/image-20230905145136192-4f94eb78.png",r="/assets/image-20230905192828795-2b189c22.png",k="/assets/image-20230906153853333-dece47d7.png",d="/assets/image-20230908151229815-0d005a43.png",v="/assets/image-20230907203640730-9aadeee3.png",m={},b=a('<p>本文主要从源码层面解析openGemini的框架，并通过聚合函数的例子来分析其中一个算子（StreamAggregateTransform）的内部结构，对于新增算子开发是有帮助的。</p><h2 id="opengemini查询引擎框架" tabindex="-1"><a class="header-anchor" href="#opengemini查询引擎框架" aria-hidden="true">#</a> openGemini查询引擎框架</h2><figure><img src="'+u+`" alt="image-20230905145136192" tabindex="0" loading="lazy"><figcaption>image-20230905145136192</figcaption></figure><p>openGemini的查询引擎的框架如图所示，分为两部分：查询语句编译系统和查询语句执行系统。</p><h3 id="编译系统" tabindex="-1"><a class="header-anchor" href="#编译系统" aria-hidden="true">#</a> 编译系统</h3><p><strong>Http Interface</strong>，监听客户端请求。openGemini对外提供HTTP RESTFULL接口，客户端将查询语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span>water_level<span class="token punctuation">)</span> 
<span class="token keyword">FROM</span> h2o_feet
<span class="token keyword">WHERE</span> <span class="token keyword">time</span> <span class="token operator">&gt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部转化为HTTP消息发送到服务端(ts-sql)，调用&quot;/query&quot;接口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-XPOST</span> <span class="token string">&quot;http://localhost:8086/query&quot;</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">--insecure</span> --data-urlencode <span class="token string">&quot;q=SELECT count(water_level)  FROM h2o_feet WHERE time &gt; now()-1h&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>入口在open_src/influx/httpd/handler.go，h.serveQuery函数负责处理请求。核心代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewHandler</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	h<span class="token punctuation">.</span><span class="token function">AddRoutes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Route<span class="token punctuation">{</span>
   		<span class="token operator">...</span>
   		Route <span class="token punctuation">{</span>
        	<span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Query serving route.</span>
          	<span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/query&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>serveQuery<span class="token punctuation">,</span>
   		<span class="token punctuation">}</span><span class="token punctuation">,</span>
   		Route<span class="token punctuation">{</span>
          	<span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Query serving route.</span>
          	<span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/query&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>serveQuery<span class="token punctuation">,</span>
   		<span class="token punctuation">}</span><span class="token punctuation">,</span>
   		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Parser And Compile</strong>，对查询语句进行合法性检查、词法分析、语法分析，编译生成抽象语法树（AST），新增的函数如果没有注册，在这里会被compileFunction函数检测到，报错 <code>ERR: undefined function xxx</code>，具体函数调用栈如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 0  0x0000000000ecbe20 in github.com/openGemini/openGemini/open_src/influx/query.(*compiledField).compileFunction
    at ./open_src/influx/query/compile.go:454
 1  0x0000000000ecb3cb in github.com/openGemini/openGemini/open_src/influx/query.(*compiledField).compileExpr
    at ./open_src/influx/query/compile.go:369
 2  0x0000000000eca26b in github.com/openGemini/openGemini/open_src/influx/query.(*compiledStatement).compileFields
    at ./open_src/influx/query/compile.go:272
 3  0x0000000000ec9dc7 in github.com/openGemini/openGemini/open_src/influx/query.(*compiledStatement).compile
    at ./open_src/influx/query/compile.go:212
 4  0x0000000000ec9465 in github.com/openGemini/openGemini/open_src/influx/query.Compile
    at ./open_src/influx/query/compile.go:129
 5  0x0000000000edaae5 in github.com/openGemini/openGemini/open_src/influx/query.Prepare
    at ./open_src/influx/query/select.go:125
 6  0x00000000011f28f0 in github.com/openGemini/openGemini/engine/executor.Select
    at ./engine/executor/select.go:49
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Logical Plan Builder</strong>，根据时序数据库设计的逻辑算子和逻辑代数，从抽象语法树生成对应的逻辑计划。在这里相当于把一个个独立的逻辑算子（例如LogicalAggregate，LogicalLimit，LogicalJoin）组装在一起，共同完成查询语句所期望的功能。每一个逻辑算子对应一个物理算子（可以理解为真正计算的函数实体），所有聚合函数，比如count、min、max、mode，都归属于<code>LogicalAggregate</code>逻辑算子，<code>LogicalAggregate</code>对应的物理算子为<code>StreamAggregateTransform</code>, <code>StreamAggregateTransform</code> 的内部再分别实现count, min, max对应的功能。</p><p>查询计划与逻辑算子发生关联的地方在 engine/executor/logic_plan.go</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>LogicalPlanBuilderImpl<span class="token punctuation">)</span> <span class="token function">Aggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> LogicalPlanBuilder <span class="token punctuation">{</span>
	last <span class="token operator">:=</span> b<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	plan <span class="token operator">:=</span> <span class="token function">NewLogicalAggregate</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> b<span class="token punctuation">.</span>schema<span class="token punctuation">)</span>   <span class="token comment">// 在这里</span>
	b<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>plan<span class="token punctuation">)</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用栈如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 0  0x00000000011a8069 in github.com/openGemini/openGemini/engine/executor.NewLogicalAggregate
    at ./engine/executor/logic_plan.go:273
 1  0x00000000011b5d55 in github.com/openGemini/openGemini/engine/executor.(*LogicalPlanBuilderImpl).Aggregate
    at ./engine/executor/logic_plan.go:2235
 2  0x00000000011f57c5 in github.com/openGemini/openGemini/engine/executor.buildAggNode
    at ./engine/executor/select.go:343
 3  0x00000000011f5a35 in github.com/openGemini/openGemini/engine/executor.buildNodes
    at ./engine/executor/select.go:355
 4  0x00000000011f5fa8 in github.com/openGemini/openGemini/engine/executor.buildQueryPlan
    at ./engine/executor/select.go:424
 5  0x00000000011f6134 in github.com/openGemini/openGemini/engine/executor.buildExtendedPlan
    at ./engine/executor/select.go:431
 6  0x00000000011f32b5 in github.com/openGemini/openGemini/engine/executor.(*preparedStatement).BuildLogicalPlan
    at ./engine/executor/select.go:140
 7  0x00000000011f37cc in github.com/openGemini/openGemini/engine/executor.(*preparedStatement).Select
    at ./engine/executor/select.go:173
 8  0x00000000011f2a0f in github.com/openGemini/openGemini/engine/executor.Select
    at ./engine/executor/select.go:63
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑算子与物理算子关联的地方在 engine/executor/agg_transform.go</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token number">147</span><span class="token punctuation">:</span> <span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">RegistryTransformCreator</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LogicalAggregate<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>StreamAggregateTransformCreator<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是一个注册器，系统启动时执行，将LogicalAggregate与StreamAggregateTransform进行绑定。其他逻辑算子与物理算子也使用同样的方式绑定，比如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var _ = RegistryTransformCreator(&amp;LogicalGroupBy{}, &amp;GroupByTransformCreator{})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Optimizer</strong>，启发式优化器，根据设计的代数规则，对逻辑计划进行基于规则的优化和重组。新增聚合算子暂时不涉及。</p><h2 id="执行系统" tabindex="-1"><a class="header-anchor" href="#执行系统" aria-hidden="true">#</a> 执行系统</h2><p><strong>DAG Builder</strong>, 将优化后的逻辑计划生成物理计划。可以简单理解为把逻辑算子替换成与之对应的物理算子（transformer)，物理算子之间依赖关系用DAG(有向无环图)表示</p><p><strong>Transformers</strong>, 所有物理执行算子的集合, 每个Transformer有输入和输出，这里的输入可以是最原始数据，也可以是其他Transformer的输出，这里的输出是Transformer的计算结果，可作为上一层Transformer的输入或者直接返回客户端的结果数据。</p><p><strong>Pipeline Executor</strong>，采用流水线模式执行物理计划中的子任务，使用 DAG Scheduler 调度任务，保证任务执行的前后依赖关系。</p><p><strong>DAG Scheduler</strong>，采用 work-stealing 算法调度物理计划（DAG），在任意时间保证最大任务并发度。</p><p>传统的执行计划都是串行执行，openGemini引入DAG的目的是让查询计划中的各个物理算子能并行的尽量并行起来，以此提升查询效率，该技术在ClickHouse和Flink中都有被用到。</p><figure><img src="`+r+`" alt="image-20230905192828795" tabindex="0" loading="lazy"><figcaption>image-20230905192828795</figcaption></figure><p>如图所示，一个由DAG Builder产生的物理计划由A, B, C, D, E, F 6个Transformer组成，其中B和C依赖A，但互相不依赖，那么当A执行结束后，B和C就可以并行执行。DAG Scheduler的任务是效调度所有Transformer的前后执行关系以及并发处理，这是一个非常复杂的事情。openGemini巧妙利用Go语言的Goroutine和Channel特性完美解决了任务调度的问题，具体做法是遍历DAG，为每一条边创建一个单向Channel作为数据传输通道，边上的两个Transformer，例如Transformer A 和 Transformer B，Transformer A把计算结果写入Channel，Transformer B从Channel中取数据，如果Channel中没有数据，Transformer B则被阻塞。如此调度器则可以把所有的Transformer并发的运行起来，通过Channel的特性自动让位置靠后的Transformer处于阻塞状态，而一旦Channel中有数据会立刻被Golang调度执行。</p><p>物理计划主要由PipelineExecutor对象来执行，核心代码在 engine/executor/pipeline_executor.go, 核心方法是Executor()，代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>func (exec *PipelineExecutor) Execute(ctx context.Context) error {
	...
	for _, p := range exec.processors {
		go func(processor Processor) {
			err := exec.work(processor)
			if err != nil {
				once.Do(func() {
					processorErr = err
					statistics.ExecutorStat.ExecFailed.Increase()
					exec.Crash()
				})
			}
			processor.FinishSpan()
			wg.Done()
		}(p)
	}
	...
}

func (exec *PipelineExecutor) work(processor Processor) error {
	...
	err := processor.Work(exec.context)
	if err != nil {
		...
	}
	return err
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中Processor是一个接口，类似于一个基类，每个Transformer对象都实现了基类的work接口，这个work函数便是每个Transformer的入口。processor.Work() 相当于启动了Transformer。</p><p>Transformer之间的Channel是在PipelineExecutor初始化时完成的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>func (exec *PipelineExecutor) init() {
	exec.processors = make(Processors, 0, len(exec.dag.mapVertexToInfo))
	for vertex, info := range exec.dag.mapVertexToInfo {
		for i, edge := range info.backwardEdges {
			_ = Connect(edge.from.transform.GetOutputs()[0], edge.to.transform.GetInputs()[i])
		}
		exec.processors = append(exec.processors, vertex.transform)
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="streamaggregatetransform工作原理解析" tabindex="-1"><a class="header-anchor" href="#streamaggregatetransform工作原理解析" aria-hidden="true">#</a> StreamAggregateTransform工作原理解析</h2><p>这里我们以聚合算子为例剖析其内部实现，帮助理解如何开发一个物理算子或者在算子内部新增功能。</p><p>StreamAggregateTransform承载了所有聚合函数在openGemini内部的具体实现，先来看它的结构</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> StreamAggregateTransform <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	BaseProcessor
	
	init                 <span class="token builtin">bool</span>   <span class="token comment">//判断是否开始处理数据，在Transform退出之前检查该标志，以清空缓存</span>
	sameInterval         <span class="token builtin">bool</span>   <span class="token comment">//</span>
	prevSameInterval     <span class="token builtin">bool</span>
	prevChunkIntervalLen <span class="token builtin">int</span>
	bufChunkNum          <span class="token builtin">int</span>    <span class="token comment">//缓存最大容量</span>
	proRes               <span class="token operator">*</span>processorResults  <span class="token comment">//上一轮处理结果缓存</span>
	iteratorParam        <span class="token operator">*</span>IteratorParams   <span class="token comment">//迭代器参数</span>
	chunkPool            <span class="token operator">*</span>CircularChunkPool  <span class="token comment">//存放结果数据的池子</span>
	newChunk             Chunk  <span class="token comment">//承载从chunkpool中拿到的chunk. trans.newChunk = trans.chunkPool.GetChunk()</span>
	nextChunkCh          <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//用于事件通知，通过写入通知数据接收协程继续接收数据到缓存中</span>
	reduceChunkCh        <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//用于事件通知，通过写入通知数据处理协程从缓存中拿数据处理</span>
	bufChunk             <span class="token punctuation">[</span><span class="token punctuation">]</span>Chunk  <span class="token comment">//数据缓存，从Inputs中读取待处理数据，缓存在bufChunk中。</span>
	Inputs               ChunkPorts <span class="token comment">//Transformer的输入管道</span>
	Outputs              ChunkPorts <span class="token comment">//Transformer的输出管道</span>
	opt                  <span class="token operator">*</span>query<span class="token punctuation">.</span>ProcessorOptions
	aggLogger            <span class="token operator">*</span>logger<span class="token punctuation">.</span>Logger
	postProcess          <span class="token keyword">func</span><span class="token punctuation">(</span>Chunk<span class="token punctuation">)</span>

	span        <span class="token operator">*</span>tracing<span class="token punctuation">.</span>Span <span class="token comment">//用于信息统计使用，比如Explain命令</span>
	computeSpan <span class="token operator">*</span>tracing<span class="token punctuation">.</span>Span <span class="token comment">//用于信息统计使用，比如Explain命令</span>

	errs errno<span class="token punctuation">.</span>Errs
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="streamaggregatetransform内部工作原理" tabindex="-1"><a class="header-anchor" href="#streamaggregatetransform内部工作原理" aria-hidden="true">#</a> StreamAggregateTransform内部工作原理</h3><figure><img src="`+k+`" alt="image-20230906153853333" tabindex="0" loading="lazy"><figcaption>image-20230906153853333</figcaption></figure><p>如图所示，StreamAggregateTransform在初始化是将创建一个ProcessorResults的对象，在ProcessorResults中，会根据不同聚合函数分别注册一系列的迭代器(比如FloatColIntegerIterator，StringColIntegerIterator)和数据处理方法(比如FloatCountReduce和IntegerCountMerge)，每个迭代器(Iterator)有一个Next()方法，这个方法才是聚合函数功能的具体实现，其中会使用到事先注册的数据处理方法(比如FloatCountReduce和IntegerCountMerge)</p><p>StreamAggregateTransform的入口是Work()函数，核心功能并发启动running和reduce两个模块，running负责取数据，reduce负责调用之前已经注册好的迭代器进行聚合数据处理，并返回。</p><p><strong>StreamAggregateTransform工作原理的源码解析</strong></p><p>StreamAggregateTransform初始化在 engine/executor/agg_transform.go，核心代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewStreamAggregateTransform</span><span class="token punctuation">(</span>
	inRowDataType<span class="token punctuation">,</span> outRowDataType <span class="token punctuation">[</span><span class="token punctuation">]</span>hybridqp<span class="token punctuation">.</span>RowDataType<span class="token punctuation">,</span> exprOpt <span class="token punctuation">[</span><span class="token punctuation">]</span>hybridqp<span class="token punctuation">.</span>ExprOptions<span class="token punctuation">,</span> opt <span class="token operator">*</span>query<span class="token punctuation">.</span>ProcessorOptions<span class="token punctuation">,</span> isSubQuery <span class="token builtin">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>StreamAggregateTransform<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	trans <span class="token operator">:=</span> <span class="token operator">&amp;</span>StreamAggregateTransform<span class="token punctuation">{</span>
		opt<span class="token punctuation">:</span>           opt<span class="token punctuation">,</span>
		bufChunkNum<span class="token punctuation">:</span>   AggBufChunkNum<span class="token punctuation">,</span>
		Inputs<span class="token punctuation">:</span>        <span class="token function">make</span><span class="token punctuation">(</span>ChunkPorts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>inRowDataType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Outputs<span class="token punctuation">:</span>       <span class="token function">make</span><span class="token punctuation">(</span>ChunkPorts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>outRowDataType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		bufChunk<span class="token punctuation">:</span>      <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Chunk<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> AggBufChunkNum<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//这里规定了bufChunk的容量</span>
		nextChunkCh<span class="token punctuation">:</span>   <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		reduceChunkCh<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		iteratorParam<span class="token punctuation">:</span> <span class="token operator">&amp;</span>IteratorParams<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		aggLogger<span class="token punctuation">:</span>     logger<span class="token punctuation">.</span><span class="token function">NewLogger</span><span class="token punctuation">(</span>errno<span class="token punctuation">.</span>ModuleQueryEngine<span class="token punctuation">)</span><span class="token punctuation">,</span>
		chunkPool<span class="token punctuation">:</span>     <span class="token function">NewCircularChunkPool</span><span class="token punctuation">(</span>CircularChunkNum<span class="token punctuation">,</span> <span class="token function">NewChunkBuilder</span><span class="token punctuation">(</span>outRowDataType<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
    <span class="token comment">//这里初始化的trans.proRes对象，NewProcessors()完成了各类迭代器的注册，新增聚合函数需要在这里实现迭代器方法和注册</span>
	trans<span class="token punctuation">.</span>proRes<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">NewProcessors</span><span class="token punctuation">(</span>inRowDataType<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> outRowDataType<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> exprOpt<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> isSubQuery<span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Work() 的核心代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>trans <span class="token operator">*</span>StreamAggregateTransform<span class="token punctuation">)</span> <span class="token function">Work</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> trans<span class="token punctuation">.</span>Inputs <span class="token punctuation">{</span>
		<span class="token keyword">go</span> trans<span class="token punctuation">.</span><span class="token function">runnable</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> errs<span class="token punctuation">)</span>  <span class="token comment">//每个Input对应一个runing协程，实则只有一个Input，预留了多个而已</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">go</span> trans<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> errs<span class="token punctuation">)</span>  <span class="token comment">//开一个reduce协程</span>

	<span class="token keyword">return</span> errs<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>running和reduce模块的核心代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token punctuation">(</span>trans <span class="token operator">*</span>StreamAggregateTransform<span class="token punctuation">)</span> <span class="token function">runnable</span><span class="token punctuation">(</span>in <span class="token builtin">int</span><span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> errs <span class="token operator">*</span>errno<span class="token punctuation">.</span>Errs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	trans<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> in<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//running协程</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>trans <span class="token operator">*</span>StreamAggregateTransform<span class="token punctuation">)</span> <span class="token function">running</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>trans<span class="token punctuation">.</span>Inputs<span class="token punctuation">[</span>in<span class="token punctuation">]</span><span class="token punctuation">.</span>State<span class="token punctuation">:</span>
			<span class="token operator">...</span>
			trans<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token boolean">true</span>
			trans<span class="token punctuation">.</span><span class="token function">appendChunk</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment">//放入缓存</span>
			<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>trans<span class="token punctuation">.</span>bufChunk<span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span>bufChunkNum <span class="token punctuation">{</span>  <span class="token comment">//缓存满了就通知reduce处理数据</span>
				trans<span class="token punctuation">.</span>reduceChunkCh <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token operator">&lt;-</span>trans<span class="token punctuation">.</span>nextChunkCh <span class="token comment">//放一个chunk到缓存，等待reduce消费的信号</span>
			<span class="token operator">...</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//reduce协程</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>trans <span class="token operator">*</span>StreamAggregateTransform<span class="token punctuation">)</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token boolean">_</span> context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> errs <span class="token operator">*</span>errno<span class="token punctuation">.</span>Errs<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// return true if transform is canceled</span>
	reduceStart <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">&lt;-</span>trans<span class="token punctuation">.</span>reduceChunkCh
	<span class="token punctuation">}</span>

	<span class="token comment">// return true if transform is canceled</span>
	nextStart <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		trans<span class="token punctuation">.</span>nextChunkCh <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	trans<span class="token punctuation">.</span>newChunk <span class="token operator">=</span> trans<span class="token punctuation">.</span>chunkPool<span class="token punctuation">.</span><span class="token function">GetChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//从池子中分配一片空间</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token function">nextStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//通知running继续往缓存放数据</span>
		<span class="token function">reduceStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//消费管道里的事件通知，如果running还没给消息，阻塞在这里等待</span>

        c <span class="token operator">:=</span> trans<span class="token punctuation">.</span><span class="token function">nextChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//从缓存中取一个chunk（数据处理单位），1个chunk包含多行(rows)数据</span>
		<span class="token operator">...</span>
		tracing<span class="token punctuation">.</span><span class="token function">SpanElapsed</span><span class="token punctuation">(</span>trans<span class="token punctuation">.</span>computeSpan<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			trans<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment">//在compute方法中处理chunk数据，最终会调到具体的一个迭代器来完成</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>running模块主要完成从Input读取数据，放入缓存，通知Reduce处理。Reduce负责调用具体的迭代器来处理数据。Running和Reduce之间通过两个单向管道（nextChunkCh和reduceChunkCh）进行事件通知。</p><p><strong>聚合函数的迭代器和处理方法注册的源码解析</strong></p>`,53),g=s("strong",null,"新增聚合函数需要在这里实现迭代器方法和注册",-1),f=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewProcessors</span><span class="token punctuation">(</span>inRowDataType<span class="token punctuation">,</span> outRowDataType hybridqp<span class="token punctuation">.</span>RowDataType<span class="token punctuation">,</span> exprOpt <span class="token punctuation">[</span><span class="token punctuation">]</span>hybridqp<span class="token punctuation">.</span>ExprOptions<span class="token punctuation">,</span> opt <span class="token operator">*</span>query<span class="token punctuation">.</span>ProcessorOptions<span class="token punctuation">,</span> isSubQuery <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>processorResults<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> exprOpt <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token keyword">switch</span> expr <span class="token operator">:=</span> exprOpt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Expr<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">*</span>influxql<span class="token punctuation">.</span>Call<span class="token punctuation">:</span>
			<span class="token operator">...</span>
			name <span class="token operator">:=</span> exprOpt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Expr<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>influxql<span class="token punctuation">.</span>Call<span class="token punctuation">)</span><span class="token punctuation">.</span>Name
			<span class="token keyword">switch</span> name <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token string">&quot;count&quot;</span><span class="token punctuation">:</span>
                <span class="token comment">//聚合函数count走这里，在NewCountRoutineImpl方法中注册</span>
				routine<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">NewCountRoutineImpl</span><span class="token punctuation">(</span>inRowDataType<span class="token punctuation">,</span> outRowDataType<span class="token punctuation">,</span> exprOpt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isSingleCall<span class="token punctuation">)</span>
				coProcessor<span class="token punctuation">.</span><span class="token function">AppendRoutine</span><span class="token punctuation">(</span>routine<span class="token punctuation">)</span>
			<span class="token keyword">case</span> <span class="token string">&quot;sum&quot;</span><span class="token punctuation">:</span>
				routine<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">NewSumRoutineImpl</span><span class="token punctuation">(</span>inRowDataType<span class="token punctuation">,</span> outRowDataType<span class="token punctuation">,</span> exprOpt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isSingleCall<span class="token punctuation">)</span>
				coProcessor<span class="token punctuation">.</span><span class="token function">AppendRoutine</span><span class="token punctuation">(</span>routine<span class="token punctuation">)</span>
			<span class="token keyword">case</span> <span class="token string">&quot;first&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;last&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;min&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;max&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;percentile&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;percentile_approx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ogsketch_percentile&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ogsketch_merge&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ogsketch_insert&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;median&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;mode&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;top&quot;</span><span class="token punctuation">:</span>
				<span class="token punctuation">.</span><span class="token punctuation">.</span>
			<span class="token keyword">case</span> <span class="token string">&quot;bottom&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;distinct&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;difference&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;non_negative_difference&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;derivative&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;non_negative_derivative&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;elapsed&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;moving_average&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;cumulative_sum&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;integral&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;rate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;irate&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;absent&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;stddev&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">case</span> <span class="token string">&quot;sample&quot;</span><span class="token punctuation">:</span>
				<span class="token operator">...</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;unsupported aggregation operator of call processor&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NewCountRoutineImpl方法的实现在engine/executor/call_processor.go，核心代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewCountRoutineImpl</span><span class="token punctuation">(</span>inRowDataType<span class="token punctuation">,</span> outRowDataType hybridqp<span class="token punctuation">.</span>RowDataType<span class="token punctuation">,</span> opt hybridqp<span class="token punctuation">.</span>ExprOptions<span class="token punctuation">,</span> isSingleCall <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Routine<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	dataType <span class="token operator">:=</span> inRowDataType<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>inOrdinal<span class="token punctuation">)</span><span class="token punctuation">.</span>Expr<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>influxql<span class="token punctuation">.</span>VarRef<span class="token punctuation">)</span><span class="token punctuation">.</span>Type
	<span class="token keyword">switch</span> dataType <span class="token punctuation">{</span>
	<span class="token keyword">case</span> influxql<span class="token punctuation">.</span>Integer<span class="token punctuation">:</span>  <span class="token comment">//聚合的字段是整型</span>
		<span class="token keyword">return</span> <span class="token function">NewRoutineImpl</span><span class="token punctuation">(</span>
			<span class="token function">NewIntegerColIntegerIterator</span><span class="token punctuation">(</span>IntegerCountReduce<span class="token punctuation">,</span> IntegerCountMerge<span class="token punctuation">,</span> isSingleCall<span class="token punctuation">,</span> inOrdinal<span class="token punctuation">,</span> outOrdinal<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inOrdinal<span class="token punctuation">,</span> outOrdinal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> influxql<span class="token punctuation">.</span>Float<span class="token punctuation">:</span>  <span class="token comment">//聚合的字段是浮点型</span>
		<span class="token keyword">return</span> <span class="token function">NewRoutineImpl</span><span class="token punctuation">(</span>
			<span class="token function">NewFloatColIntegerIterator</span><span class="token punctuation">(</span>FloatCountReduce<span class="token punctuation">,</span> IntegerCountMerge<span class="token punctuation">,</span> isSingleCall<span class="token punctuation">,</span> inOrdinal<span class="token punctuation">,</span> outOrdinal<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inOrdinal<span class="token punctuation">,</span> outOrdinal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> influxql<span class="token punctuation">.</span>String<span class="token punctuation">:</span> <span class="token comment">//聚合的字段是字符串</span>
		<span class="token keyword">return</span> <span class="token function">NewRoutineImpl</span><span class="token punctuation">(</span>
			<span class="token function">NewStringColIntegerIterator</span><span class="token punctuation">(</span>StringCountReduce<span class="token punctuation">,</span> IntegerCountMerge<span class="token punctuation">,</span> isSingleCall<span class="token punctuation">,</span> inOrdinal<span class="token punctuation">,</span> outOrdinal<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inOrdinal<span class="token punctuation">,</span> outOrdinal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> influxql<span class="token punctuation">.</span>Boolean<span class="token punctuation">:</span> <span class="token comment">//聚合的字段是布尔型</span>
		<span class="token keyword">return</span> <span class="token function">NewRoutineImpl</span><span class="token punctuation">(</span>
			<span class="token function">NewBooleanColIntegerIterator</span><span class="token punctuation">(</span>BooleanCountReduce<span class="token punctuation">,</span> IntegerCountMerge<span class="token punctuation">,</span> isSingleCall<span class="token punctuation">,</span> inOrdinal<span class="token punctuation">,</span> outOrdinal<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inOrdinal<span class="token punctuation">,</span> outOrdinal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为不同数据类型，数据处理方式不同，因此要适配不同的迭代器。比如有如下数据：</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code>h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">8.120</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566000000000000000</span>
h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">8.005</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566000360000000000</span>
h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">7.887</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566000720000000000</span>
h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">7.762</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566001080000000000</span>
h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">7.635</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566001440000000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询语句</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. SELECT count(water_level) FROM h2o_feet
2. SELECT count(description) FROM h2o_feet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>water_level是浮点型，就用FloatColIntegerIterator，如果是description，则用StringColIntegerIterator</p><p>每个迭代器必须包含一个Reduce和Merge方法。具体什么作用？以FloatCountReduce和IntegerCountMerge举例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">/*
c,包含待处理数据的chunk
ordinal, 指定chunk中的数据列
star，表示chunk中数据分组的起始位置。比如查询是按时间分组再统计
end，表示chunk中数据分组的结束位置。比如查询是按时间分组再统计。如果查询没有分组，那么chunk中所有数据都属于一个分组
*/</span>
<span class="token keyword">func</span> <span class="token function">FloatCountReduce</span><span class="token punctuation">(</span>c Chunk<span class="token punctuation">,</span> ordinal<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> count <span class="token builtin">int64</span>
    <span class="token comment">//ordinal指定要计算chunk中第几列数据。如果指定列的数据都没有空值，直接用end-start快速计算count值</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>ordinal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NilCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token comment">// fast path</span>
		count <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>
		<span class="token keyword">return</span> start<span class="token punctuation">,</span> count<span class="token punctuation">,</span> count <span class="token operator">==</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//如果数据列中有空值，就要换一种计算方法</span>
	vs<span class="token punctuation">,</span> ve <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>ordinal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetRangeValueIndexV2</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
	count <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>ve <span class="token operator">-</span> vs<span class="token punctuation">)</span>
	<span class="token keyword">return</span> start<span class="token punctuation">,</span> count<span class="token punctuation">,</span> count <span class="token operator">==</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token comment">//merge方法是做一个累计求和，把上一个chunk中统计的count值 + 当前求得的count值。因为chunk中数据量是一定的，要统计的数据可能分成了很多个chunk</span>
<span class="token keyword">func</span> <span class="token function">IntegerCountMerge</span><span class="token punctuation">(</span>prevPoint<span class="token punctuation">,</span> currPoint <span class="token operator">*</span>IntegerPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	prevPoint<span class="token punctuation">.</span>value <span class="token operator">+=</span> currPoint<span class="token punctuation">.</span>value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Chunk数据结构解析</strong></p><p>Chunk可以被看着是一张表，是Transformer之间数据传输和数据处理的最小单位，是向量化的重要载体。</p><figure><img src="`+d+`" alt="image-20230908151229815" tabindex="0" loading="lazy"><figcaption>image-20230908151229815</figcaption></figure><p>Chunk结构体定义如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ChunkImpl <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	rowDataType   hybridqp<span class="token punctuation">.</span>RowDataType
	name          <span class="token builtin">string</span>
	tags          <span class="token punctuation">[</span><span class="token punctuation">]</span>ChunkTags
	tagIndex      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	time          <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span>
	intervalIndex <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	columns       <span class="token punctuation">[</span><span class="token punctuation">]</span>Column
	dims          <span class="token punctuation">[</span><span class="token punctuation">]</span>Column
	<span class="token operator">*</span>record<span class="token punctuation">.</span>Record
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子，用同样的数据：</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code>h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">8.120</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566000000000000000</span>
h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">8.005</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566000360000000000</span>
h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">7.887</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566000720000000000</span>
h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">7.762</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566001080000000000</span>
h2o_feet<span class="token punctuation">,</span><span class="token key property">location</span><span class="token punctuation">=</span>coyote_creek water_level<span class="token punctuation">=</span><span class="token number">7.635</span><span class="token punctuation">,</span><span class="token key property">description</span><span class="token punctuation">=</span><span class="token string">&quot;between 6 and 9 feet&quot;</span> <span class="token number">1566001440000000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> TAG <span class="token keyword">KEYS</span>
name: h2o_feet
tagKey
<span class="token comment">------</span>
location

<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span>water_level<span class="token punctuation">)</span> <span class="token keyword">FROM</span> h2o_feet <span class="token keyword">WHERE</span> <span class="token keyword">time</span> <span class="token operator">&gt;=</span> <span class="token number">1566000000000000000</span> <span class="token operator">AND</span> <span class="token keyword">time</span> <span class="token operator">&lt;=</span> <span class="token number">1566001440000000000</span> <span class="token keyword">GROUP</span> <span class="token keyword">By</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token number">12</span>m<span class="token punctuation">)</span>
name: h2o_feet
<span class="token keyword">time</span>                count
<span class="token comment">----                -----</span>
<span class="token number">1566000000000000000</span> <span class="token number">2</span>
<span class="token number">1566000720000000000</span> <span class="token number">2</span>
<span class="token number">1566001440000000000</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>摘取其一个StreamAggregateTransform接收到的Chunk，查看内部具体组成</p><figure><img src="`+v+`" alt="image-20230907203640730" tabindex="0" loading="lazy"><figcaption>image-20230907203640730</figcaption></figure><p><strong>迭代器Next方法解析</strong></p><p>以FloatColIntegerIterator为例, 在engine/executor/agg_iterator.gen.go, Next()方法的核心代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>FloatColIntegerIterator<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span>ie <span class="token operator">*</span>IteratorEndpoint<span class="token punctuation">,</span> p <span class="token operator">*</span>IteratorParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//inChunk存储待处理数据，即StreamAggregateTransform接收到的Chunk最终在这里被处理，outChunk存储处理后的结果数据</span>
	inChunk<span class="token punctuation">,</span> outChunk <span class="token operator">:=</span> ie<span class="token punctuation">.</span>InputPoint<span class="token punctuation">.</span>Chunk<span class="token punctuation">,</span> ie<span class="token punctuation">.</span>OutputPoint<span class="token punctuation">.</span>Chunk
    <span class="token comment">//inOrdinal是一个位置信息，初始为0，遍历chunk中的所有列。当前例子中chunk只有1列</span>
    <span class="token comment">//这里判断列是否为空，如果为空，需要给这些列数据用nil填充</span>
	<span class="token keyword">if</span> inChunk<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>inOrdinal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>prevPoint<span class="token punctuation">.</span>isNil <span class="token punctuation">{</span>
		<span class="token keyword">var</span> addIntervalLen <span class="token builtin">int</span>
		<span class="token keyword">if</span> p<span class="token punctuation">.</span>sameInterval <span class="token punctuation">{</span>
			addIntervalLen <span class="token operator">=</span> inChunk<span class="token punctuation">.</span><span class="token function">IntervalLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			addIntervalLen <span class="token operator">=</span> inChunk<span class="token punctuation">.</span><span class="token function">IntervalLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> addIntervalLen <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			outChunk<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>outOrdinal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AppendManyNil</span><span class="token punctuation">(</span>addIntervalLen<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> end <span class="token builtin">int</span>
	firstIndex<span class="token punctuation">,</span> lastIndex <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>inChunk<span class="token punctuation">.</span><span class="token function">IntervalIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
    <span class="token comment">//[start,end]代表一个分组数据，分组数据是chunk数据的一个子集</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> start <span class="token operator">:=</span> <span class="token keyword">range</span> inChunk<span class="token punctuation">.</span><span class="token function">IntervalIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> i <span class="token operator">&lt;</span> lastIndex <span class="token punctuation">{</span>
			end <span class="token operator">=</span> inChunk<span class="token punctuation">.</span><span class="token function">IntervalIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			end <span class="token operator">=</span> inChunk<span class="token punctuation">.</span><span class="token function">NumberOfRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
        <span class="token comment">//fn为FloatCountReduce方法</span>
		index<span class="token punctuation">,</span> value<span class="token punctuation">,</span> isNil <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>inChunk<span class="token punctuation">,</span> r<span class="token punctuation">.</span>inOrdinal<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
		<span class="token keyword">if</span> isNil <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> firstIndex <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token punctuation">(</span>firstIndex <span class="token operator">==</span> lastIndex <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>prevPoint<span class="token punctuation">.</span>isNil <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>sameInterval<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token punctuation">(</span>firstIndex <span class="token operator">!=</span> lastIndex <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> firstIndex <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>prevPoint<span class="token punctuation">.</span>isNil<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token punctuation">(</span>firstIndex <span class="token operator">!=</span> lastIndex <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> lastIndex <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>sameInterval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			outChunk<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>outOrdinal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AppendNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
        <span class="token comment">//这里主要是处理三种情况</span>
        <span class="token comment">//1. 分组数据跨两个chunk，当前chunk的前面部分数据与上一个chunk的最后部分数据属于一个分组，</span>
        <span class="token comment">// 当前计算结果需要加前一个数据的结果，调用fv: FloatCountmerge方法</span>
        <span class="token comment">//2. 分组数据跨两个chunk，当前chunk的后面部分数据与下一个chunk的最前面部分数据属于一个分组，</span>
        <span class="token comment">// 当前计算结果需要缓存起来</span>
        <span class="token comment">//3. 分组数据不跨chunk，计算结果为最终结果</span>
		<span class="token keyword">if</span> i <span class="token operator">==</span> firstIndex <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>r<span class="token punctuation">.</span>prevPoint<span class="token punctuation">.</span>isNil <span class="token punctuation">{</span>
			r<span class="token punctuation">.</span><span class="token function">processFirstWindow</span><span class="token punctuation">(</span>inChunk<span class="token punctuation">,</span> outChunk<span class="token punctuation">,</span> isNil<span class="token punctuation">,</span> p<span class="token punctuation">.</span>sameInterval<span class="token punctuation">,</span>
				firstIndex <span class="token operator">==</span> lastIndex<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">==</span> lastIndex <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>sameInterval <span class="token punctuation">{</span>
			r<span class="token punctuation">.</span><span class="token function">processLastWindow</span><span class="token punctuation">(</span>inChunk<span class="token punctuation">,</span> index<span class="token punctuation">,</span> isNil<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>isNil <span class="token punctuation">{</span>
			r<span class="token punctuation">.</span><span class="token function">processMiddleWindow</span><span class="token punctuation">(</span>inChunk<span class="token punctuation">,</span> outChunk<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function y(h,x){const t=l("font");return p(),o("div",null,[b,s("p",null,[n("NewProcessors()的实现在engine/executor/call_processor.go，主要完成了各聚合函数的迭代器和数据处理方法的注册，"),c(t,{color:"red"},{default:i(()=>[g]),_:1}),n(", 核心代码如下：")]),f])}const C=e(m,[["render",y],["__file","query_engine.html.vue"]]);export{C as default};
