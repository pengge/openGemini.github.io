import{_ as a,X as t,Y as p,a3 as s,Z as n}from"./framework-a5f096d1.js";const e="/assets/data_compress_4-8b1ba456.png",o="/assets/data_compress_1-be190ec1.jpg",c="/assets/data_compress_2-0940bdac.jpg",l="/assets/data_compress_3-7cb9e4fa.jpg",i={},u=s('<h2 id="编码格式" tabindex="-1"><a class="header-anchor" href="#编码格式" aria-hidden="true">#</a> 编码格式</h2><h5 id="delta" tabindex="-1"><a class="header-anchor" href="#delta" aria-hidden="true">#</a> delta</h5><p>差分编码又称增量编码，编码时，第一个数据不变，其他数据转换为与上一个数据的delta。该算法应用广泛，如需要查看文件的历史更改记录（版本控制、Git等）。在时序数据库中，很少单独使用，一般搭配Simple8b或者Zig-Zag一起使用，压缩效果更好。</p><p>举例说明：假如原数组为[10000,10001,10002,10003,10004,10005]，delta编码后就会变成[10000,1,1,1,1,1]再进行ZigZag编码，压缩效果很好。</p><h5 id="zigzag" tabindex="-1"><a class="header-anchor" href="#zigzag" aria-hidden="true">#</a> ZigZag</h5><p>Zig-zag 算法的核心思想是减少数据中无效的 0，比如正整数 1，32位计算机系统中表示为</p>',6),r=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mn",null,"00000000"),n("mo",{separator:"true"},","),n("mn",null,"00000000"),n("mo",{separator:"true"},","),n("mn",null,"00000000"),n("mo",{separator:"true"},","),n("mn",null,"00000001")]),n("annotation",{encoding:"application/x-tex"}," 00000000,00000000,00000000,00000001 ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"00000000"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"00000000"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"00000000"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"00000001")])])])])],-1),k=n("p",null,"计算机存储时需要用4个字节，如果去掉前面部分多余的0，则至少可以节约3/4的存储空间。如果是负数，计算机中采用补码表示，比如−1，32位计算机系统中表示为",-1),d=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mn",null,"11111111"),n("mo",{separator:"true"},","),n("mn",null,"11111111"),n("mo",{separator:"true"},","),n("mn",null,"11111111"),n("mo",{separator:"true"},","),n("mn",null,"11111111")]),n("annotation",{encoding:"application/x-tex"}," 11111111,11111111,11111111,11111111 ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"11111111"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"11111111"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"11111111"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"11111111")])])])])],-1),m=n("p",null,"通过公式",-1),b=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",null,"<"),n("mo",null,"<"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",null,"∧"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",null,">"),n("mo",null,">"),n("mn",null,"31"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"}," (n << 1)\\wedge(n >> 31) ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"<<"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∧"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},">>"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"31"),n("span",{class:"mclose"},")")])])])])],-1),v=n("p",null,"的变换，转换成",-1),g=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mn",null,"00000000"),n("mo",{separator:"true"},","),n("mn",null,"00000000"),n("mo",{separator:"true"},","),n("mn",null,"00000000"),n("mo",{separator:"true"},","),n("mn",null,"00000001")]),n("annotation",{encoding:"application/x-tex"}," 00000000,00000000,00000000,00000001 ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},"00000000"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"00000000"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"00000000"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"00000001")])])])])],-1),h=s('<p>即把负数转换成小整数，再进行压缩。该算法同样对于小正整数或者小负整数（如 −1，−2）的压缩效果好，对大整数或大负整数效果不佳。</p><h5 id="simple8b" tabindex="-1"><a class="header-anchor" href="#simple8b" aria-hidden="true">#</a> Simple8b</h5><p>Simple8b 是 64 位算法，维护了一个查找表，实现将多个整形数据压缩到一个 64bit 长整型中。其中前 4 位表示选择器，用来标记每个值使用多少bit，后面 60 位用于存储数据。 <img src="'+e+'" alt="simple8b算法查找表" loading="lazy"> 如上图所示，Integers Coded表示可压缩的数据集大小，Bits Per Integer表示每个整数分配多少 Bits 来表示，比如要压缩8个数据，选择器选择8，每个数据用7个 bits 表示，但是如果某个数据的值超过了7个 bits 的表示范围，那么就需要尝试用选择器9，只能压缩前7个数据，每个数据用8个bits来表示，以此类推。第一次未压缩的数据将压缩到一个新的64bit的长整型中，由此可见simple8b算法对小整数的压缩效果比较好，对大整数的压缩效果不佳。</p><h5 id="zstandard" tabindex="-1"><a class="header-anchor" href="#zstandard" aria-hidden="true">#</a> Zstandard</h5><p>Zstandard 简称&quot;zstd&quot;（发音 zee standard），主要应用场景为实时流压缩，其数据压缩比与zlib 接近，但又有非常高的数据压缩效率和压缩速度。zstd算法实现是基于FSE和Huffman编码对数据进行压缩，由于算法内容比较繁杂，具体可参照 RFC8878 的描述。</p><h5 id="snappy" tabindex="-1"><a class="header-anchor" href="#snappy" aria-hidden="true">#</a> Snappy</h5><p>Snappy是Google开源的压缩算法实现，它的设计目标是追求速度而不是最高的压缩率。 Snappy借鉴了LZ77的思路，并对其做了许多优化，与zlib的最快模式相比，Snappy对于大多数输入来说都快一个数量级，但生成的压缩文件要大20%到100%,该算法的基本思想是在序列S(S1, S2, S3, ..., Sn) 中寻找相同的子序列S_{i,i+l} = S_{j,j+l}（这里的序列可以是字符、也可以是数值），并用（tag，offset，lenght）三元组代替重复的序列，其中tag为标签，是一个指定的数值，offset表示相对位移 (j−i)，length 表示匹配的子序列长度。 例如有如下字符串ABFDGHEOHNFLESSDGLSJGOGHEOHNFLESSDG其中GHEOHNFLESSDG 重复出现，长度为13，为方便理解算法原理，在这里我们忽略掉匹配相同子串的过程，则可用（1,18,13）替代重复出现的GHEOHNFLESSDG 字符串。</p><h5 id="rle" tabindex="-1"><a class="header-anchor" href="#rle" aria-hidden="true">#</a> RLE</h5><p>RLE全称（run-length encoding），翻译为游程编码，又译行程长度编码，又称变动长度编码法（run coding）。游程编码是一种简单的非破坏性资料压缩法，其好处是加压缩和解压缩都非常快。其方法是计算连续出现的资料长度压缩之。RLE可以对连续相同字符进行压缩。 举例，对于ABBBBBBBBA，可以压缩为1A8B1A。</p><h5 id="gorilla" tabindex="-1"><a class="header-anchor" href="#gorilla" aria-hidden="true">#</a> Gorilla</h5><p>Gorilla paper compression是facebook发布的论文中提到的关于float类型的压缩实现。Gorilla相比于别的压缩方式对双精度float的压缩率更好。由于算法内容比较繁杂，具体可参照论文Gorilla: A Fast, Scalable, In-Memory Time Series Database中的描述。</p><h5 id="bit-packing" tabindex="-1"><a class="header-anchor" href="#bit-packing" aria-hidden="true">#</a> Bit-packing</h5><p>Bit-packing 数据压缩算法的核心思想是将数据按照位(bit)进行打包和存储，以减少数据的存储空间。它利用了数据中存在的冗余性和重复性，通过将多个数据项合并为一个较小的数据单元来减少存储空间的使用。Bit-packing 数据压缩算法通常使用无符号整数来表示数据，因此不能直接处理负数。如果需要处理负数，可以使用一些技巧来转换为无符号整数进行处理。 在bit-packing中，数据项按照顺序排列，并且每个数据项占用相同数量的位数。这样可以确保数据的顺序和结构不会改变。例如，如果有一组整数需要存储，每个整数占用8位，那么bit-packing算法将把这些整数按顺序排列，并将它们合并到一个字节中，每个整数占用一个字节的一部分位。</p><h2 id="源码解析" tabindex="-1"><a class="header-anchor" href="#源码解析" aria-hidden="true">#</a> 源码解析</h2><h5 id="int类型" tabindex="-1"><a class="header-anchor" href="#int类型" aria-hidden="true">#</a> int类型</h5><p>在lib/encoding/int.go中定义了int类型的编码，一共涉及5种编码：ConstDelta、Simple8b、ZSTD、ZigZag和delta。在Integer类下有可以设置编码类型的方法，也有编码与解码的方法。</p><p>int类型加密流程图如下: <img src="'+o+`" alt="int加密流程图" loading="lazy"></p><p>int类型的encoder初始化函数如下，先调用reset()，isConstDelta和isSimple8b都设成true，然后假如数组长度小于3，isConstDelta和isSimple8b都设成false，然后对数组同时进行进行zigzag加密和delta加密，同时判断数字差是否超过simple8b要求的最大值，如果超过就把isSimple8b设成false；同时判断每两个数之间的差值是否为定值，如果为定值那么设isConstDelta为true。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>enc <span class="token operator">*</span>Integer<span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	enc<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>
		enc<span class="token punctuation">.</span>isSimple8b <span class="token operator">=</span> <span class="token boolean">false</span>
		enc<span class="token punctuation">.</span>isConstDelta <span class="token operator">=</span> <span class="token boolean">false</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	v0 <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	enc<span class="token punctuation">.</span>zigZagDeltas <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>enc<span class="token punctuation">.</span>zigZagDeltas<span class="token punctuation">,</span> <span class="token function">ZigZagEncode</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span><span class="token punctuation">)</span>
	delta <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	zigZagEnc <span class="token operator">:=</span> <span class="token function">ZigZagEncode</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span>
	<span class="token keyword">if</span> enc<span class="token punctuation">.</span>isSimple8b <span class="token operator">&amp;&amp;</span> zigZagEnc <span class="token operator">&gt;</span> simple8b<span class="token punctuation">.</span>MaxValue <span class="token punctuation">{</span>
		enc<span class="token punctuation">.</span>isSimple8b <span class="token operator">=</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	enc<span class="token punctuation">.</span>zigZagDeltas <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>enc<span class="token punctuation">.</span>zigZagDeltas<span class="token punctuation">,</span> zigZagEnc<span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		delta <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
		zigZagEnc <span class="token operator">=</span> <span class="token function">ZigZagEncode</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span>
		enc<span class="token punctuation">.</span>isConstDelta <span class="token operator">=</span> enc<span class="token punctuation">.</span>isConstDelta <span class="token operator">&amp;&amp;</span> enc<span class="token punctuation">.</span>zigZagDeltas<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> zigZagEnc
		<span class="token keyword">if</span> enc<span class="token punctuation">.</span>isSimple8b <span class="token operator">&amp;&amp;</span> zigZagEnc <span class="token operator">&gt;</span> simple8b<span class="token punctuation">.</span>MaxValue <span class="token punctuation">{</span>
			enc<span class="token punctuation">.</span>isSimple8b <span class="token operator">=</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
		enc<span class="token punctuation">.</span>zigZagDeltas <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>enc<span class="token punctuation">.</span>zigZagDeltas<span class="token punctuation">,</span> zigZagEnc<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="time类型" tabindex="-1"><a class="header-anchor" href="#time类型" aria-hidden="true">#</a> time类型</h5><p>在lib/encoding/timestamp.go中定义了timestamp类型的编码，一共涉及4种编码：ConstDelta、delta、Simple8b和Snappy。在Time类下有可以设置编码类型的方法，也有编码与解码的方法。这里的ConstDelta就是当数组内相邻两个数的差值固定时，可以采用这种编码方式。</p><p>time类型编码流程图如下:</p><img src="`+c+`" alt="time加密流程图" style="zoom:67%;"><p>Encoding方法和encodingInit方法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>enc <span class="token operator">*</span>Time<span class="token punctuation">)</span> <span class="token function">Encoding</span><span class="token punctuation">(</span>in <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> out <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	times <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">Bytes2Uint64Slice</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> enc<span class="token punctuation">.</span><span class="token function">packUncompressedData</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	enc<span class="token punctuation">.</span><span class="token function">encodingInit</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span>
	<span class="token keyword">if</span> enc<span class="token punctuation">.</span>isConstDelta <span class="token punctuation">{</span>
		<span class="token keyword">return</span> enc<span class="token punctuation">.</span><span class="token function">constDeltaEncoding</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> enc<span class="token punctuation">.</span>isSimple8b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> enc<span class="token punctuation">.</span><span class="token function">simple8bEncoding</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> enc<span class="token punctuation">.</span><span class="token function">snappyEncoding</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>enc <span class="token operator">*</span>Time<span class="token punctuation">)</span> <span class="token function">encodingInit</span><span class="token punctuation">(</span>times <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	timesN <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span>enc<span class="token punctuation">.</span>deltas<span class="token punctuation">)</span> <span class="token operator">&lt;</span> timesN <span class="token punctuation">{</span>
		enc<span class="token punctuation">.</span>deltas <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> timesN<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	enc<span class="token punctuation">.</span>deltas <span class="token operator">=</span> enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span><span class="token punctuation">:</span>timesN<span class="token punctuation">]</span>

	enc<span class="token punctuation">.</span>isConstDelta <span class="token operator">=</span> <span class="token boolean">true</span>
	enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>timesN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> times<span class="token punctuation">[</span>timesN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> times<span class="token punctuation">[</span>timesN<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
	enc<span class="token punctuation">.</span>isSimple8b <span class="token operator">=</span> enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>timesN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> simple8b<span class="token punctuation">.</span>MaxValue
	enc<span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token function">scale</span><span class="token punctuation">(</span>enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>timesN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> timesN <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
		enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> times<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> times<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token keyword">for</span> enc<span class="token punctuation">.</span>scale <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>enc<span class="token punctuation">.</span>scale <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			enc<span class="token punctuation">.</span>scale <span class="token operator">=</span> enc<span class="token punctuation">.</span>scale <span class="token operator">/</span> <span class="token number">10</span>
		<span class="token punctuation">}</span>
		enc<span class="token punctuation">.</span>isConstDelta <span class="token operator">=</span> enc<span class="token punctuation">.</span>isConstDelta <span class="token operator">&amp;&amp;</span> enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
		enc<span class="token punctuation">.</span>isSimple8b <span class="token operator">=</span> enc<span class="token punctuation">.</span>isSimple8b <span class="token operator">&amp;&amp;</span> enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> simple8b<span class="token punctuation">.</span>MaxValue
	<span class="token punctuation">}</span>
	enc<span class="token punctuation">.</span>deltas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> times<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="float类型" tabindex="-1"><a class="header-anchor" href="#float类型" aria-hidden="true">#</a> float类型</h5><p>在lib/compress/float.go中定义了float类型的编码，一共涉及4种编码：Snappy、Gorilla、Same和RLE。当数组长度小于4的时候不进行压缩，数组长度小于8的时候不进行RLE压缩。这里的Same编码就是数组内每个数都相同时可以采用这种编码。</p><p>float类型加密流程图如下: <img src="`+l+`" alt="float加密流程图" loading="lazy"></p><p>AdaptiveEncoding方法源码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Float<span class="token punctuation">)</span> <span class="token function">AdaptiveEncoding</span><span class="token punctuation">(</span>in <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> out <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	values <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">Bytes2Float64Slice</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>
	ctx <span class="token operator">:=</span> <span class="token function">GenerateContext</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> ctx<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span><span class="token function">NotCompress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">compressNull</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span><span class="token function">Same</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		out <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> floatCompressedSame<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span>rle<span class="token punctuation">.</span><span class="token function">SameValueEncoding</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> ctx<span class="token punctuation">.</span><span class="token function">RLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		out <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> floatCompressedRLE<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span>rle<span class="token punctuation">.</span><span class="token function">Encoding</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	<span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> ctx<span class="token punctuation">.</span><span class="token function">Snappy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			out <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> floatCompressedSnappy<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span>
			out<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">SnappyEncoding</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>

		out<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">GorillaEncoding</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span>
		out <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token operator">...</span><span class="token punctuation">)</span>
		out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> floatCompressedGorilla <span class="token operator">&lt;&lt;</span> <span class="token number">4</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// compression ratio greater than 90%</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">90</span><span class="token operator">/</span><span class="token number">100</span> <span class="token punctuation">{</span>
		out <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">compressNull</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="bool类型" tabindex="-1"><a class="header-anchor" href="#bool类型" aria-hidden="true">#</a> bool类型</h5><p>在lib/encoding/bool.go中定义了bool类型的编码，只有Bitpack一种编码形式。编码函数如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>enc <span class="token operator">*</span>Boolean<span class="token punctuation">)</span> <span class="token function">Encoding</span><span class="token punctuation">(</span>in <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> out <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	enc<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
	<span class="token keyword">if</span> enc<span class="token punctuation">.</span>bw <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		enc<span class="token punctuation">.</span>bw <span class="token operator">=</span> bitstream<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>enc<span class="token punctuation">.</span>buf<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		enc<span class="token punctuation">.</span>bw<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>enc<span class="token punctuation">.</span>buf<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	values <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">Bytes2BooleanSlice</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>
	<span class="token keyword">var</span> count <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	numberenc<span class="token punctuation">.</span><span class="token function">MarshalUint32Copy</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span> <span class="token operator">=</span> enc<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token function">byte</span><span class="token punctuation">(</span>boolCompressedBitpack <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> enc<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> enc<span class="token punctuation">.</span>bw<span class="token punctuation">.</span><span class="token function">WriteBit</span><span class="token punctuation">(</span>bitstream<span class="token punctuation">.</span><span class="token function">Bit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token boolean">_</span> <span class="token operator">=</span> enc<span class="token punctuation">.</span>bw<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span>bitstream<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span>

	<span class="token keyword">return</span> enc<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="string类型" tabindex="-1"><a class="header-anchor" href="#string类型" aria-hidden="true">#</a> string类型</h5><p>在lib/encoding/string.go中定义了string类型的编码，一共涉及2种编码：Snappy和Zstd。String类型如果不指定编码类型默认是Snappy，也可以指定为Zstd编码。</p>`,36),f=[u,r,k,d,m,b,v,g,h];function y(w,x){return t(),p("div",null,f)}const _=a(i,[["render",y],["__file","data_compress.html.vue"]]);export{_ as default};
